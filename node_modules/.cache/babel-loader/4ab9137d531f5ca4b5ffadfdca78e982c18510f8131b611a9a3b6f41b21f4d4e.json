{"ast":null,"code":"import { Cache } from '../../assets/cache/Cache.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { DynamicBitmapFont } from './DynamicBitmapFont.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\"use strict\";\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false\n    };\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    var _dynamicFont$ensureCh;\n    let fontFamilyKey = \"\".concat(style.fontFamily, \"-bitmap\");\n    let overrideFill = true;\n    if (style._fill.fill) {\n      fontFamilyKey += style._fill.fill.uid;\n      overrideFill = false;\n    }\n    if (!Cache.has(fontFamilyKey)) {\n      const fnt = new DynamicBitmapFont({\n        style,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fnt.once(\"destroy\", () => Cache.remove(fontFamilyKey));\n      Cache.set(fontFamilyKey, fnt);\n    }\n    const dynamicFont = Cache.get(fontFamilyKey);\n    (_dynamicFont$ensureCh = dynamicFont.ensureCharacters) === null || _dynamicFont$ensureCh === void 0 ? void 0 : _dynamicFont$ensureCh.call(dynamicFont, text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   */\n  getLayout(text, style) {\n    const bitmapFont = this.getFont(text, style);\n    return getBitmapTextLayout(text.split(\"\"), style, bitmapFont);\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   */\n  measureText(text, style) {\n    return this.getLayout(text, style);\n  }\n  // eslint-disable-next-line max-len\n  install() {\n    var _options;\n    let options = arguments.length <= 0 ? undefined : arguments[0];\n    if (typeof options === \"string\") {\n      var _ref, _ref2, _ref3, _ref4;\n      options = {\n        name: options,\n        style: arguments.length <= 1 ? undefined : arguments[1],\n        chars: (_ref = arguments.length <= 2 ? undefined : arguments[2]) === null || _ref === void 0 ? void 0 : _ref.chars,\n        resolution: (_ref2 = arguments.length <= 2 ? undefined : arguments[2]) === null || _ref2 === void 0 ? void 0 : _ref2.resolution,\n        padding: (_ref3 = arguments.length <= 2 ? undefined : arguments[2]) === null || _ref3 === void 0 ? void 0 : _ref3.padding,\n        skipKerning: (_ref4 = arguments.length <= 2 ? undefined : arguments[2]) === null || _ref4 === void 0 ? void 0 : _ref4.skipKerning\n      };\n      deprecation(v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = (_options = options) === null || _options === void 0 ? void 0 : _options.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = {\n      ...this.defaultOptions,\n      ...options\n    };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    const overrideFill = style._fill.fill !== null && style._fill.fill !== void 0;\n    const font = new DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false\n    });\n    const flatChars = resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.set(\"\".concat(name, \"-bitmap\"), font);\n    font.once(\"destroy\", () => Cache.remove(\"\".concat(name, \"-bitmap\")));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = \"\".concat(name, \"-bitmap\");\n    const font = Cache.get(cacheKey);\n    if (font) {\n      Cache.remove(cacheKey);\n      font.destroy();\n    }\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\nexport { BitmapFontManager };","map":{"version":3,"names":["BitmapFontManagerClass","constructor","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","defaultOptions","chars","resolution","padding","skipKerning","getFont","text","style","_dynamicFont$ensureCh","fontFamilyKey","concat","fontFamily","overrideFill","_fill","fill","uid","Cache","has","fnt","DynamicBitmapFont","overrideSize","once","remove","set","dynamicFont","get","ensureCharacters","call","getLayout","bitmapFont","getBitmapTextLayout","split","measureText","install","_options","options","arguments","length","undefined","_ref","_ref2","_ref3","_ref4","name","deprecation","v8_0_0","Error","textStyle","TextStyle","font","flatChars","resolveCharacters","join","uninstall","cacheKey","destroy","BitmapFontManager"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts"],"sourcesContent":["import { Cache } from '../../assets/cache/Cache';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\n/**\n *\n * The options for installing a new BitmapFont. Once installed the font will be available for use in the BitmapText.\n * It can be accessed by the `fontFamily` property of the TextStyle.\n *\n * Install a new BitmapFont will create the characters provided for the font and store them in the cache.\n * But don't worry, if a character is requested that hasn't been generated yet, it will be created on the fly.\n * @memberof text\n */\nexport interface BitmapFontInstallOptions\n{\n    /** the name of the font, this will be the name you use in the fontFamily of text style to access this font */\n    name?: string;\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * If true, this could potentially increase the performance, but may impact the rendered text appearance.\n     * @default false\n     */\n    skipKerning?: boolean;\n    /** Style options to render with BitmapFont. */\n    style?: TextStyle | TextStyleOptions;\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @memberof text\n * @name BitmapFontManager\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n    };\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill)\n        {\n            fontFamilyKey += style._fill.fill.uid;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const fnt = new DynamicBitmapFont({\n                style,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fnt.once('destroy', () => Cache.remove(fontFamilyKey));\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     */\n    public getLayout(text: string, style: TextStyle): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        return getBitmapTextLayout(text.split(''), style, bitmapFont);\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     */\n    public measureText(text: string, style: TextStyle): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = style._fill.fill !== null && style._fill.fill !== undefined;\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            Cache.remove(cacheKey);\n            font.destroy();\n        }\n    }\n}\n\nexport const BitmapFontManager = new BitmapFontManagerClass();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}