{"ast":null,"code":"import { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../scene/container/bounds/getGlobalBounds.mjs';\n\"use strict\";\nconst tempBounds = new Bounds();\nconst _Culler = class _Culler {\n  /**\n   * Culls the children of a specific container based on the given view. This will also cull items that are not\n   * being explicitly managed by the culler.\n   * @param container - The container to cull.\n   * @param view - The view rectangle.\n   * @param skipUpdateTransform - Whether to skip updating the transform.\n   */\n  cull(container, view) {\n    let skipUpdateTransform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this._cullRecursive(container, view, skipUpdateTransform);\n  }\n  _cullRecursive(container, view) {\n    let skipUpdateTransform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (container.cullable && container.measurable && container.includeInBuild) {\n      var _container$cullArea;\n      const bounds = (_container$cullArea = container.cullArea) !== null && _container$cullArea !== void 0 ? _container$cullArea : getGlobalBounds(container, skipUpdateTransform, tempBounds);\n      container.culled = !(bounds.x >= view.x + view.width || bounds.y >= view.y + view.height || bounds.x + bounds.width <= view.x || bounds.y + bounds.height <= view.y);\n    }\n    if (!container.cullableChildren || container.culled || !container.renderable || !container.measurable || !container.includeInBuild) return;\n    for (let i = 0; i < container.children.length; i++) {\n      this._cullRecursive(container.children[i], view, skipUpdateTransform);\n    }\n  }\n};\n/** A shared instance of the Culler class. */\n_Culler.shared = new _Culler();\nlet Culler = _Culler;\nexport { Culler };","map":{"version":3,"names":["tempBounds","Bounds","_Culler","cull","container","view","skipUpdateTransform","arguments","length","undefined","_cullRecursive","cullable","measurable","includeInBuild","_container$cullArea","bounds","cullArea","getGlobalBounds","culled","x","width","y","height","cullableChildren","renderable","i","children","shared","Culler"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/culling/Culler.ts"],"sourcesContent":["import { Bounds } from '../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../scene/container/bounds/getGlobalBounds';\n\nimport type { Container } from '../scene/container/Container';\n\nconst tempBounds = new Bounds();\n\ntype RectangleLike = {x: number, y: number, width: number, height: number};\n\n/**\n * The Culler class is responsible for managing and culling containers.\n *\n *\n * Culled containers will not be rendered, and their children will not be processed. This can be useful for\n * performance optimization when dealing with large scenes.\n * @example\n * import { Culler, Container } from 'pixi.js';\n *\n * const culler = new Culler();\n * const stage = new Container();\n *\n * ... set up stage ...\n *\n * culler.cull(stage, { x: 0, y: 0, width: 800, height: 600 });\n * renderer.render(stage);\n * @memberof scene\n */\nexport class Culler\n{\n    /**\n     * Culls the children of a specific container based on the given view. This will also cull items that are not\n     * being explicitly managed by the culler.\n     * @param container - The container to cull.\n     * @param view - The view rectangle.\n     * @param skipUpdateTransform - Whether to skip updating the transform.\n     */\n    public cull(container: Container, view: RectangleLike, skipUpdateTransform = true)\n    {\n        this._cullRecursive(container, view, skipUpdateTransform);\n    }\n\n    private _cullRecursive(container: Container, view: RectangleLike, skipUpdateTransform = true)\n    {\n        if (container.cullable && container.measurable && container.includeInBuild)\n        {\n            const bounds = container.cullArea ?? getGlobalBounds(container, skipUpdateTransform, tempBounds);\n\n            // check view intersection..\n            container.culled = !(bounds.x >= view.x + view.width\n                || bounds.y >= view.y + view.height\n                || bounds.x + bounds.width <= view.x\n                || bounds.y + bounds.height <= view.y);\n        }\n\n        // dont process children if not needed\n        if (\n            !container.cullableChildren\n            || container.culled\n            || !container.renderable\n            || !container.measurable\n            || !container.includeInBuild\n        ) return;\n\n        for (let i = 0; i < container.children.length; i++)\n        {\n            this._cullRecursive(container.children[i], view, skipUpdateTransform);\n        }\n    }\n\n    /** A shared instance of the Culler class. */\n    public static shared = new Culler();\n}\n"],"mappings":";;;AAKA,MAAMA,UAAA,GAAa,IAAIC,MAAO;AAsBvB,MAAMC,OAAA,GAAN,MAAMA,OACb;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQWC,IAAKA,CAAAC,SAAA,EAAsBC,IAAqB,EACvD;IAAA,IADuDC,mBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAsB,IAC7E;IACS,KAAAG,cAAA,CAAeN,SAAW,EAAAC,IAAA,EAAMC,mBAAmB;EAAA;EAGpDI,cAAeA,CAAAN,SAAA,EAAsBC,IAAqB,EAClE;IAAA,IADkEC,mBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAsB,IACxF;IACI,IAAIH,SAAU,CAAAO,QAAA,IAAYP,SAAU,CAAAQ,UAAA,IAAcR,SAAA,CAAUS,cAC5D;MAAA,IAAAC,mBAAA;MACI,MAAMC,MAAA,IAAAD,mBAAA,GAASV,SAAU,CAAAY,QAAA,cAAAF,mBAAA,cAAAA,mBAAA,GAAYG,eAAgB,CAAAb,SAAA,EAAWE,mBAAA,EAAqBN,UAAU;MAGrFI,SAAA,CAAAc,MAAA,GAAS,EAAEH,MAAA,CAAOI,CAAK,IAAAd,IAAA,CAAKc,CAAA,GAAId,IAAK,CAAAe,KAAA,IACxCL,MAAO,CAAAM,CAAA,IAAKhB,IAAK,CAAAgB,CAAA,GAAIhB,IAAA,CAAKiB,MAC1B,IAAAP,MAAA,CAAOI,CAAI,GAAAJ,MAAA,CAAOK,KAAS,IAAAf,IAAA,CAAKc,CAAA,IAChCJ,MAAO,CAAAM,CAAA,GAAIN,MAAO,CAAAO,MAAA,IAAUjB,IAAK,CAAAgB,CAAA;IAAA;IAI5C,IACI,CAACjB,SAAA,CAAUmB,gBACR,IAAAnB,SAAA,CAAUc,MACV,KAACd,SAAU,CAAAoB,UAAA,IACX,CAACpB,SAAA,CAAUQ,UACX,KAACR,SAAU,CAAAS,cAAA,EAChB;IAEF,SAASY,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIrB,SAAU,CAAAsB,QAAA,CAASlB,MAAA,EAAQiB,CAC/C;MACI,KAAKf,cAAA,CAAeN,SAAU,CAAAsB,QAAA,CAASD,CAAC,GAAGpB,IAAA,EAAMC,mBAAmB;IAAA;EACxE;AAKR;AAAA;AA5CaJ,OA2CK,CAAAyB,MAAA,GAAS,IAAIzB,OAAO;AA3C/B,IAAM0B,MAAN,GAAA1B,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}