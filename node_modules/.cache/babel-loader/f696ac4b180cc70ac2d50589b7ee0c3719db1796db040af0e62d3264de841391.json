{"ast":null,"code":"\"use strict\";\n\nconst bitmapFontXMLParser = {\n  test(data) {\n    const xml = data;\n    return typeof xml !== \"string\" && \"getElementsByTagName\" in xml && xml.getElementsByTagName(\"page\").length && xml.getElementsByTagName(\"info\")[0].getAttribute(\"face\") !== null;\n  },\n  parse(xml) {\n    const data = {\n      chars: {},\n      pages: [],\n      lineHeight: 0,\n      fontSize: 0,\n      fontFamily: \"\",\n      distanceField: null,\n      baseLineOffset: 0\n    };\n    const info = xml.getElementsByTagName(\"info\")[0];\n    const common = xml.getElementsByTagName(\"common\")[0];\n    const distanceField = xml.getElementsByTagName(\"distanceField\")[0];\n    if (distanceField) {\n      data.distanceField = {\n        type: distanceField.getAttribute(\"fieldType\"),\n        range: parseInt(distanceField.getAttribute(\"distanceRange\"), 10)\n      };\n    }\n    const page = xml.getElementsByTagName(\"page\");\n    const char = xml.getElementsByTagName(\"char\");\n    const kerning = xml.getElementsByTagName(\"kerning\");\n    data.fontSize = parseInt(info.getAttribute(\"size\"), 10);\n    data.fontFamily = info.getAttribute(\"face\");\n    data.lineHeight = parseInt(common.getAttribute(\"lineHeight\"), 10);\n    for (let i = 0; i < page.length; i++) {\n      data.pages.push({\n        id: parseInt(page[i].getAttribute(\"id\"), 10) || 0,\n        file: page[i].getAttribute(\"file\")\n      });\n    }\n    const map = {};\n    data.baseLineOffset = data.lineHeight - parseInt(common.getAttribute(\"base\"), 10);\n    for (let i = 0; i < char.length; i++) {\n      var _ref, _charNode$getAttribut;\n      const charNode = char[i];\n      const id = parseInt(charNode.getAttribute(\"id\"), 10);\n      let letter = (_ref = (_charNode$getAttribut = charNode.getAttribute(\"letter\")) !== null && _charNode$getAttribut !== void 0 ? _charNode$getAttribut : charNode.getAttribute(\"char\")) !== null && _ref !== void 0 ? _ref : String.fromCharCode(id);\n      if (letter === \"space\") letter = \" \";\n      map[id] = letter;\n      data.chars[letter] = {\n        id,\n        // texture deets..\n        page: parseInt(charNode.getAttribute(\"page\"), 10) || 0,\n        x: parseInt(charNode.getAttribute(\"x\"), 10),\n        y: parseInt(charNode.getAttribute(\"y\"), 10),\n        width: parseInt(charNode.getAttribute(\"width\"), 10),\n        height: parseInt(charNode.getAttribute(\"height\"), 10),\n        // render deets..\n        xOffset: parseInt(charNode.getAttribute(\"xoffset\"), 10),\n        yOffset: parseInt(charNode.getAttribute(\"yoffset\"), 10),\n        // + baseLineOffset,\n        xAdvance: parseInt(charNode.getAttribute(\"xadvance\"), 10),\n        kerning: {}\n      };\n    }\n    for (let i = 0; i < kerning.length; i++) {\n      const first = parseInt(kerning[i].getAttribute(\"first\"), 10);\n      const second = parseInt(kerning[i].getAttribute(\"second\"), 10);\n      const amount = parseInt(kerning[i].getAttribute(\"amount\"), 10);\n      data.chars[map[second]].kerning[map[first]] = amount;\n    }\n    return data;\n  }\n};\nexport { bitmapFontXMLParser };","map":{"version":3,"names":["bitmapFontXMLParser","test","data","xml","getElementsByTagName","length","getAttribute","parse","chars","pages","lineHeight","fontSize","fontFamily","distanceField","baseLineOffset","info","common","type","range","parseInt","page","char","kerning","i","push","id","file","map","_ref","_charNode$getAttribut","charNode","letter","String","fromCharCode","x","y","width","height","xOffset","yOffset","xAdvance","first","second","amount"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontXMLParser.ts"],"sourcesContent":["import type { BitmapFontData, RawCharData } from '../AbstractBitmapFont';\n\nexport const bitmapFontXMLParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        const xml = data as Document;\n\n        return typeof xml !== 'string'\n            && 'getElementsByTagName' in xml\n            && xml.getElementsByTagName('page').length\n            && xml.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    },\n\n    parse(xml: Document): BitmapFontData\n    {\n        const data: BitmapFontData = {\n            chars: {},\n            pages: [],\n            lineHeight: 0,\n            fontSize: 0,\n            fontFamily: '',\n            distanceField: null,\n            baseLineOffset: 0,\n        };\n\n        const info = xml.getElementsByTagName('info')[0];\n        const common = xml.getElementsByTagName('common')[0];\n        const distanceField = xml.getElementsByTagName('distanceField')[0];\n\n        if (distanceField)\n        {\n            data.distanceField = {\n                type: distanceField.getAttribute('fieldType') as 'sdf' | 'msdf' | 'none',\n                range: parseInt(distanceField.getAttribute('distanceRange'), 10),\n            };\n        }\n\n        // pages and chars:\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n\n        data.fontSize = parseInt(info.getAttribute('size'), 10);\n        data.fontFamily = info.getAttribute('face');\n        data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.pages.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        const map: Record<string, string> = {};\n\n        data.baseLineOffset = data.lineHeight - parseInt(common.getAttribute('base'), 10);\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const charNode = char[i];\n            const id = parseInt(charNode.getAttribute('id'), 10);\n\n            let letter = charNode.getAttribute('letter') ?? charNode.getAttribute('char') ?? String.fromCharCode(id);\n\n            if (letter === 'space')letter = ' ';\n\n            map[id] = letter;\n\n            data.chars[letter] = {\n                id,\n                // texture deets..\n                page: parseInt(charNode.getAttribute('page'), 10) || 0,\n                x: parseInt(charNode.getAttribute('x'), 10),\n                y: parseInt(charNode.getAttribute('y'), 10),\n                width: parseInt(charNode.getAttribute('width'), 10),\n                height: parseInt(charNode.getAttribute('height'), 10),\n\n                // render deets..\n                xOffset: parseInt(charNode.getAttribute('xoffset'), 10),\n                yOffset: parseInt(charNode.getAttribute('yoffset'), 10), // + baseLineOffset,\n                xAdvance: parseInt(charNode.getAttribute('xadvance'), 10),\n                kerning: {},\n            } as RawCharData;\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            const first = parseInt(kerning[i].getAttribute('first'), 10);\n            const second = parseInt(kerning[i].getAttribute('second'), 10);\n            const amount = parseInt(kerning[i].getAttribute('amount'), 10);\n\n            data.chars[map[second]].kerning[map[first]] = amount;// * 10000;\n        }\n\n        return data;\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}