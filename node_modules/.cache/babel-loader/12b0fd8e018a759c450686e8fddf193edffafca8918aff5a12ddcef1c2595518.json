{"ast":null,"code":"import { Sprite } from '../../scene/sprite/Sprite.mjs';\n\"use strict\";\nconst colors = [\"#000080\",\n// Navy Blue\n\"#228B22\",\n// Forest Green\n\"#8B0000\",\n// Dark Red\n\"#4169E1\",\n// Royal Blue\n\"#008080\",\n// Teal\n\"#800000\",\n// Maroon\n\"#9400D3\",\n// Dark Violet\n\"#FF8C00\",\n// Dark Orange\n\"#556B2F\",\n// Olive Green\n\"#8B008B\"\n// Dark Magenta\n];\nlet colorTick = 0;\nfunction logScene(container) {\n  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    color: \"#000000\"\n  };\n  if (container.isRenderGroupRoot) {\n    data.color = colors[colorTick++];\n  }\n  let spaces = \"\";\n  for (let i = 0; i < depth; i++) {\n    spaces += \"    \";\n  }\n  let label = container.label;\n  if (!label && container instanceof Sprite) {\n    label = \"sprite:\".concat(container.texture.label);\n  }\n  let output = \"%c \".concat(spaces, \"|- \").concat(label, \" (worldX:\").concat(container.worldTransform.tx, \", relativeRenderX:\").concat(container.relativeGroupTransform.tx, \", renderX:\").concat(container.groupTransform.tx, \", localX:\").concat(container.x, \")\");\n  if (container.isRenderGroupRoot) {\n    output += \" (RenderGroup)\";\n  }\n  if (container.filters) {\n    output += \"(*filters)\";\n  }\n  console.log(output, \"color:\".concat(data.color, \"; font-weight:bold;\"));\n  depth++;\n  for (let i = 0; i < container.children.length; i++) {\n    const child = container.children[i];\n    logScene(child, depth, {\n      ...data\n    });\n  }\n}\nfunction logRenderGroupScene(renderGroup) {\n  let depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    index: 0,\n    color: \"#000000\"\n  };\n  let spaces = \"\";\n  for (let i = 0; i < depth; i++) {\n    spaces += \"    \";\n  }\n  const output = \"%c \".concat(spaces, \"- \").concat(data.index, \": \").concat(renderGroup.root.label, \" worldX:\").concat(renderGroup.worldTransform.tx);\n  console.log(output, \"color:\".concat(data.color, \"; font-weight:bold;\"));\n  depth++;\n  for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n    const child = renderGroup.renderGroupChildren[i];\n    logRenderGroupScene(child, depth, {\n      ...data,\n      index: i\n    });\n  }\n}\nexport { logRenderGroupScene, logScene };","map":{"version":3,"names":["colors","colorTick","logScene","container","depth","arguments","length","undefined","data","color","isRenderGroupRoot","spaces","i","label","Sprite","concat","texture","output","worldTransform","tx","relativeGroupTransform","groupTransform","x","filters","console","log","children","child","logRenderGroupScene","renderGroup","index","root","renderGroupChildren"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/utils/logging/logScene.ts"],"sourcesContent":["/* eslint-disable no-console */\n\nimport { Sprite } from '../../scene/sprite/Sprite';\n\nimport type { Container } from '../../scene/container/Container';\nimport type { RenderGroup } from '../../scene/container/RenderGroup';\n\nconst colors = [\n    '#000080', // Navy Blue\n    '#228B22', // Forest Green\n    '#8B0000', // Dark Red\n    '#4169E1', // Royal Blue\n    '#008080', // Teal\n    '#800000', // Maroon\n    '#9400D3', // Dark Violet\n    '#FF8C00', // Dark Orange\n    '#556B2F', // Olive Green\n    '#8B008B' // Dark Magenta\n];\n\nlet colorTick = 0;\n\nexport function logScene(container: Container, depth = 0, data: {color?: string} = { color: '#000000' })\n{\n    if (container.isRenderGroupRoot)\n    {\n        data.color = colors[colorTick++];\n    }\n\n    //    turn depth into number of spaces:\n    let spaces = '';\n\n    for (let i = 0; i < depth; i++)\n    {\n        spaces += '    ';\n    }\n\n    let label = container.label;\n\n    if (!label && container instanceof Sprite)\n    {\n        label = `sprite:${container.texture.label}`;\n    }\n\n    // eslint-disable-next-line max-len\n    let output = `%c ${spaces}|- ${label} (worldX:${container.worldTransform.tx}, relativeRenderX:${container.relativeGroupTransform.tx}, renderX:${container.groupTransform.tx}, localX:${container.x})`;\n\n    if (container.isRenderGroupRoot)\n    {\n        output += ' (RenderGroup)';\n    }\n\n    if (container.filters)\n    {\n        output += '(*filters)';\n    }\n\n    console.log(output, `color:${data.color}; font-weight:bold;`);\n\n    depth++;\n\n    for (let i = 0; i < container.children.length; i++)\n    {\n        const child = container.children[i];\n\n        logScene(child, depth, { ...data });\n    }\n}\n\nexport function logRenderGroupScene(\n    renderGroup: RenderGroup, depth = 0,\n    data: {index: number, color?: string} = { index: 0, color: '#000000' }\n)\n{\n    // turn depth into number of spaces:\n    let spaces = '';\n\n    for (let i = 0; i < depth; i++)\n    {\n        spaces += '    ';\n    }\n\n    const output = `%c ${spaces}- ${data.index}: ${renderGroup.root.label} worldX:${renderGroup.worldTransform.tx}`;\n\n    console.log(output, `color:${data.color}; font-weight:bold;`);\n\n    depth++;\n\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n    {\n        const child = renderGroup.renderGroupChildren[i];\n\n        logRenderGroupScene(child, depth, { ...data, index: i });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}