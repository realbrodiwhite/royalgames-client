{"ast":null,"code":"import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\nimport { Container } from '../../container/Container.mjs';\nimport { GraphicsContext } from './GraphicsContext.mjs';\n\"use strict\";\nclass Graphics extends Container {\n  /**\n   * @param options - Options for the Graphics.\n   */\n  constructor(options) {\n    if (options instanceof GraphicsContext) {\n      options = {\n        context: options\n      };\n    }\n    const {\n      context,\n      roundPixels,\n      ...rest\n    } = options || {};\n    super({\n      label: \"Graphics\",\n      ...rest\n    });\n    this.canBundle = true;\n    this.renderPipeId = \"graphics\";\n    this._roundPixels = 0;\n    if (!context) {\n      this._context = this._ownedContext = new GraphicsContext();\n    } else {\n      this._context = context;\n    }\n    this._context.on(\"update\", this.onViewUpdate, this);\n    this.allowChildren = false;\n    this.roundPixels = roundPixels !== null && roundPixels !== void 0 ? roundPixels : false;\n  }\n  set context(context) {\n    if (context === this._context) return;\n    this._context.off(\"update\", this.onViewUpdate, this);\n    this._context = context;\n    this._context.on(\"update\", this.onViewUpdate, this);\n    this.onViewUpdate();\n  }\n  get context() {\n    return this._context;\n  }\n  /**\n   * The local bounds of the graphic.\n   * @type {rendering.Bounds}\n   */\n  get bounds() {\n    return this._context.bounds;\n  }\n  /**\n   * Adds the bounds of this object to the bounds object.\n   * @param bounds - The output bounds object.\n   */\n  addBounds(bounds) {\n    bounds.addBounds(this._context.bounds);\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    return this._context.containsPoint(point);\n  }\n  /**\n   *  Whether or not to round the x/y position of the graphic.\n   * @type {boolean}\n   */\n  get roundPixels() {\n    return !!this._roundPixels;\n  }\n  set roundPixels(value) {\n    this._roundPixels = value ? 1 : 0;\n  }\n  onViewUpdate() {\n    this._didChangeId += 1 << 12;\n    this._didGraphicsUpdate = true;\n    if (this.didViewUpdate) return;\n    this.didViewUpdate = true;\n    if (this.renderGroup) {\n      this.renderGroup.onChildViewUpdate(this);\n    }\n  }\n  /**\n   * Destroys this graphics renderable and optionally its context.\n   * @param options - Options parameter. A boolean will act as if all options\n   *\n   * If the context was created by this graphics and `destroy(false)` or `destroy()` is called\n   * then the context will still be destroyed.\n   *\n   * If you want to explicitly not destroy this context that this graphics created,\n   * then you should pass destroy({ context: false })\n   *\n   * If the context was passed in as an argument to the constructor then it will not be destroyed\n   * @param {boolean} [options.texture=false] - Should destroy the texture of the graphics context\n   * @param {boolean} [options.textureSource=false] - Should destroy the texture source of the graphics context\n   * @param {boolean} [options.context=false] - Should destroy the context\n   */\n  destroy(options) {\n    if (this._ownedContext && !options) {\n      this._ownedContext.destroy(options);\n    } else if (options === true || (options === null || options === void 0 ? void 0 : options.context) === true) {\n      this._context.destroy(options);\n    }\n    this._ownedContext = null;\n    this._context = null;\n    super.destroy(options);\n  }\n  _callContextMethod(method, args) {\n    this.context[method](...args);\n    return this;\n  }\n  // --------------------------------------- GraphicsContext methods ---------------------------------------\n  /**\n   * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n   * pattern, or a more complex style defined by a FillStyle object.\n   * @param {FillStyleInputs} args - The fill style to apply. This can be a simple color, a gradient or\n   * pattern object, or a FillStyle or ConvertedFillStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setFillStyle() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return this._callContextMethod(\"setFillStyle\", args);\n  }\n  /**\n   * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n   * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n   * @param {FillStyleInputs} args - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n   * or a StrokeStyle or ConvertedStrokeStyle object.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  setStrokeStyle() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return this._callContextMethod(\"setStrokeStyle\", args);\n  }\n  fill() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return this._callContextMethod(\"fill\", args);\n  }\n  /**\n   * Strokes the current path with the current stroke style. This method can take an optional\n   * FillStyleInputs parameter to define the stroke's appearance, including its color, width, and other properties.\n   * @param {FillStyleInputs} args - (Optional) The stroke style to apply. Can be defined as a simple color or a more\n   * complex style object. If omitted, uses the current stroke style.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  stroke() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return this._callContextMethod(\"stroke\", args);\n  }\n  texture() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    return this._callContextMethod(\"texture\", args);\n  }\n  /**\n   * Resets the current path. Any previous path and its commands are discarded and a new path is\n   * started. This is typically called before beginning a new shape or series of drawing commands.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  beginPath() {\n    return this._callContextMethod(\"beginPath\", []);\n  }\n  /**\n   * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n   * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n   * fail to cut correctly!\n   */\n  cut() {\n    return this._callContextMethod(\"cut\", []);\n  }\n  arc() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    return this._callContextMethod(\"arc\", args);\n  }\n  arcTo() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    return this._callContextMethod(\"arcTo\", args);\n  }\n  arcToSvg() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    return this._callContextMethod(\"arcToSvg\", args);\n  }\n  bezierCurveTo() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    return this._callContextMethod(\"bezierCurveTo\", args);\n  }\n  /**\n   * Closes the current path by drawing a straight line back to the start.\n   * If the shape is already closed or there are no points in the path, this method does nothing.\n   * @returns The instance of the current object for chaining.\n   */\n  closePath() {\n    return this._callContextMethod(\"closePath\", []);\n  }\n  ellipse() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    return this._callContextMethod(\"ellipse\", args);\n  }\n  circle() {\n    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      args[_key11] = arguments[_key11];\n    }\n    return this._callContextMethod(\"circle\", args);\n  }\n  path() {\n    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      args[_key12] = arguments[_key12];\n    }\n    return this._callContextMethod(\"path\", args);\n  }\n  lineTo() {\n    for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      args[_key13] = arguments[_key13];\n    }\n    return this._callContextMethod(\"lineTo\", args);\n  }\n  moveTo() {\n    for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n      args[_key14] = arguments[_key14];\n    }\n    return this._callContextMethod(\"moveTo\", args);\n  }\n  quadraticCurveTo() {\n    for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n      args[_key15] = arguments[_key15];\n    }\n    return this._callContextMethod(\"quadraticCurveTo\", args);\n  }\n  rect() {\n    for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n      args[_key16] = arguments[_key16];\n    }\n    return this._callContextMethod(\"rect\", args);\n  }\n  roundRect() {\n    for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n      args[_key17] = arguments[_key17];\n    }\n    return this._callContextMethod(\"roundRect\", args);\n  }\n  poly() {\n    for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n      args[_key18] = arguments[_key18];\n    }\n    return this._callContextMethod(\"poly\", args);\n  }\n  regularPoly() {\n    for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n      args[_key19] = arguments[_key19];\n    }\n    return this._callContextMethod(\"regularPoly\", args);\n  }\n  roundPoly() {\n    for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n      args[_key20] = arguments[_key20];\n    }\n    return this._callContextMethod(\"roundPoly\", args);\n  }\n  roundShape() {\n    for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {\n      args[_key21] = arguments[_key21];\n    }\n    return this._callContextMethod(\"roundShape\", args);\n  }\n  filletRect() {\n    for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n      args[_key22] = arguments[_key22];\n    }\n    return this._callContextMethod(\"filletRect\", args);\n  }\n  chamferRect() {\n    for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n      args[_key23] = arguments[_key23];\n    }\n    return this._callContextMethod(\"chamferRect\", args);\n  }\n  star() {\n    for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n      args[_key24] = arguments[_key24];\n    }\n    return this._callContextMethod(\"star\", args);\n  }\n  svg() {\n    for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n      args[_key25] = arguments[_key25];\n    }\n    return this._callContextMethod(\"svg\", args);\n  }\n  restore() {\n    for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {\n      args[_key26] = arguments[_key26];\n    }\n    return this._callContextMethod(\"restore\", args);\n  }\n  /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n  save() {\n    return this._callContextMethod(\"save\", []);\n  }\n  /**\n   * Returns the current transformation matrix of the graphics context.\n   * @returns The current transformation matrix.\n   */\n  getTransform() {\n    return this.context.getTransform();\n  }\n  /**\n   * Resets the current transformation matrix to the identity matrix, effectively removing\n   * any transformations (rotation, scaling, translation) previously applied.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  resetTransform() {\n    return this._callContextMethod(\"resetTransform\", []);\n  }\n  rotateTransform() {\n    for (var _len27 = arguments.length, args = new Array(_len27), _key27 = 0; _key27 < _len27; _key27++) {\n      args[_key27] = arguments[_key27];\n    }\n    return this._callContextMethod(\"rotate\", args);\n  }\n  scaleTransform() {\n    for (var _len28 = arguments.length, args = new Array(_len28), _key28 = 0; _key28 < _len28; _key28++) {\n      args[_key28] = arguments[_key28];\n    }\n    return this._callContextMethod(\"scale\", args);\n  }\n  setTransform() {\n    for (var _len29 = arguments.length, args = new Array(_len29), _key29 = 0; _key29 < _len29; _key29++) {\n      args[_key29] = arguments[_key29];\n    }\n    return this._callContextMethod(\"setTransform\", args);\n  }\n  transform() {\n    for (var _len30 = arguments.length, args = new Array(_len30), _key30 = 0; _key30 < _len30; _key30++) {\n      args[_key30] = arguments[_key30];\n    }\n    return this._callContextMethod(\"transform\", args);\n  }\n  translateTransform() {\n    for (var _len31 = arguments.length, args = new Array(_len31), _key31 = 0; _key31 < _len31; _key31++) {\n      args[_key31] = arguments[_key31];\n    }\n    return this._callContextMethod(\"translate\", args);\n  }\n  /**\n   * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n   * and optionally resetting transformations to the identity matrix.\n   * @returns The instance of the current GraphicsContext for method chaining.\n   */\n  clear() {\n    return this._callContextMethod(\"clear\", []);\n  }\n  /**\n   * The fill style to use.\n   * @type {ConvertedFillStyle}\n   */\n  get fillStyle() {\n    return this._context.fillStyle;\n  }\n  set fillStyle(value) {\n    this._context.fillStyle = value;\n  }\n  /**\n   * The stroke style to use.\n   * @type {ConvertedStrokeStyle}\n   */\n  get strokeStyle() {\n    return this._context.strokeStyle;\n  }\n  set strokeStyle(value) {\n    this._context.strokeStyle = value;\n  }\n  /**\n   * Creates a new Graphics object.\n   * Note that only the context of the object is cloned, not its transform (position,scale,etc)\n   * @param deep - Whether to create a deep clone of the graphics object. If false, the context\n   * will be shared between the two objects (default false). If true, the context will be\n   * cloned (recommended if you need to modify the context in any way).\n   * @returns - A clone of the graphics object\n   */\n  clone() {\n    let deep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (deep) {\n      return new Graphics(this._context.clone());\n    }\n    this._ownedContext = null;\n    const clone = new Graphics(this._context);\n    return clone;\n  }\n  // -------- v7 deprecations ---------\n  /**\n   * @param width\n   * @param color\n   * @param alpha\n   * @deprecated since 8.0.0 Use {@link Graphics#setStrokeStyle} instead\n   */\n  lineStyle(width, color, alpha) {\n    deprecation(v8_0_0, \"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.\");\n    const strokeStyle = {};\n    width && (strokeStyle.width = width);\n    color && (strokeStyle.color = color);\n    alpha && (strokeStyle.alpha = alpha);\n    this.context.strokeStyle = strokeStyle;\n    return this;\n  }\n  /**\n   * @param color\n   * @param alpha\n   * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n   */\n  beginFill(color, alpha) {\n    deprecation(v8_0_0, \"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.\");\n    const fillStyle = {};\n    color && (fillStyle.color = color);\n    alpha && (fillStyle.alpha = alpha);\n    this.context.fillStyle = fillStyle;\n    return this;\n  }\n  /**\n   * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n   */\n  endFill() {\n    deprecation(v8_0_0, \"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.\");\n    this.context.fill();\n    const strokeStyle = this.context.strokeStyle;\n    if (strokeStyle.width !== GraphicsContext.defaultStrokeStyle.width || strokeStyle.color !== GraphicsContext.defaultStrokeStyle.color || strokeStyle.alpha !== GraphicsContext.defaultStrokeStyle.alpha) {\n      this.context.stroke();\n    }\n    return this;\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#circle} instead\n   */\n  drawCircle() {\n    deprecation(v8_0_0, \"Graphics#drawCircle has been renamed to Graphics#circle\");\n    for (var _len32 = arguments.length, args = new Array(_len32), _key32 = 0; _key32 < _len32; _key32++) {\n      args[_key32] = arguments[_key32];\n    }\n    return this._callContextMethod(\"circle\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#ellipse} instead\n   */\n  drawEllipse() {\n    deprecation(v8_0_0, \"Graphics#drawEllipse has been renamed to Graphics#ellipse\");\n    for (var _len33 = arguments.length, args = new Array(_len33), _key33 = 0; _key33 < _len33; _key33++) {\n      args[_key33] = arguments[_key33];\n    }\n    return this._callContextMethod(\"ellipse\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#poly} instead\n   */\n  drawPolygon() {\n    deprecation(v8_0_0, \"Graphics#drawPolygon has been renamed to Graphics#poly\");\n    for (var _len34 = arguments.length, args = new Array(_len34), _key34 = 0; _key34 < _len34; _key34++) {\n      args[_key34] = arguments[_key34];\n    }\n    return this._callContextMethod(\"poly\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#rect} instead\n   */\n  drawRect() {\n    deprecation(v8_0_0, \"Graphics#drawRect has been renamed to Graphics#rect\");\n    for (var _len35 = arguments.length, args = new Array(_len35), _key35 = 0; _key35 < _len35; _key35++) {\n      args[_key35] = arguments[_key35];\n    }\n    return this._callContextMethod(\"rect\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#roundRect} instead\n   */\n  drawRoundedRect() {\n    deprecation(v8_0_0, \"Graphics#drawRoundedRect has been renamed to Graphics#roundRect\");\n    for (var _len36 = arguments.length, args = new Array(_len36), _key36 = 0; _key36 < _len36; _key36++) {\n      args[_key36] = arguments[_key36];\n    }\n    return this._callContextMethod(\"roundRect\", args);\n  }\n  /**\n   * @param {...any} args\n   * @deprecated since 8.0.0 Use {@link Graphics#star} instead\n   */\n  drawStar() {\n    deprecation(v8_0_0, \"Graphics#drawStar has been renamed to Graphics#star\");\n    for (var _len37 = arguments.length, args = new Array(_len37), _key37 = 0; _key37 < _len37; _key37++) {\n      args[_key37] = arguments[_key37];\n    }\n    return this._callContextMethod(\"star\", args);\n  }\n}\nexport { Graphics };","map":{"version":3,"names":["Graphics","Container","constructor","options","GraphicsContext","context","roundPixels","rest","label","canBundle","renderPipeId","_roundPixels","_context","_ownedContext","on","onViewUpdate","allowChildren","off","bounds","addBounds","containsPoint","point","value","_didChangeId","_didGraphicsUpdate","didViewUpdate","renderGroup","onChildViewUpdate","destroy","_callContextMethod","method","args","setFillStyle","_len","arguments","length","Array","_key","setStrokeStyle","_len2","_key2","fill","_len3","_key3","stroke","_len4","_key4","texture","_len5","_key5","beginPath","cut","arc","_len6","_key6","arcTo","_len7","_key7","arcToSvg","_len8","_key8","bezierCurveTo","_len9","_key9","closePath","ellipse","_len10","_key10","circle","_len11","_key11","path","_len12","_key12","lineTo","_len13","_key13","moveTo","_len14","_key14","quadraticCurveTo","_len15","_key15","rect","_len16","_key16","roundRect","_len17","_key17","poly","_len18","_key18","regularPoly","_len19","_key19","roundPoly","_len20","_key20","roundShape","_len21","_key21","filletRect","_len22","_key22","chamferRect","_len23","_key23","star","_len24","_key24","svg","_len25","_key25","restore","_len26","_key26","save","getTransform","resetTransform","rotateTransform","_len27","_key27","scaleTransform","_len28","_key28","setTransform","_len29","_key29","transform","_len30","_key30","translateTransform","_len31","_key31","clear","fillStyle","strokeStyle","clone","deep","undefined","lineStyle","width","color","alpha","deprecation","v8_0_0","beginFill","endFill","defaultStrokeStyle","drawCircle","_len32","_key32","drawEllipse","_len33","_key33","drawPolygon","_len34","_key34","drawRect","_len35","_key35","drawRoundedRect","_len36","_key36","drawStar","_len37","_key37"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/scene/graphics/shared/Graphics.ts"],"sourcesContent":["import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { Container } from '../../container/Container';\nimport { GraphicsContext } from './GraphicsContext';\n\nimport type { ColorSource } from '../../../color/Color';\nimport type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Instruction } from '../../../rendering/renderers/shared/instructions/Instruction';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { View } from '../../../rendering/renderers/shared/view/View';\nimport type { Bounds } from '../../container/bounds/Bounds';\nimport type { ContainerOptions } from '../../container/Container';\nimport type { ContextDestroyOptions, DestroyOptions } from '../../container/destroyTypes';\nimport type { FillStyle, FillStyleInputs, StrokeStyle } from './GraphicsContext';\nimport type { GraphicsPath } from './path/GraphicsPath';\nimport type { RoundedPoint } from './path/roundShape';\n\n/**\n * Constructor options used for `Graphics` instances.\n * ```js\n * const graphics = new Graphics({\n *    fillStyle: { color: 0xff0000, alpha: 0.5 },\n *    strokeStyle: { color: 0x00ff00, width: 2 },\n * });\n * ```\n * @see {@link scene.Graphics}\n * @memberof scene\n */\nexport interface GraphicsOptions extends ContainerOptions\n{\n    /** The GraphicsContext to use, useful for reuse and optimisation */\n    context?: GraphicsContext;\n    /** Whether or not to round the x/y position. */\n    roundPixels?: boolean;\n}\n\n/**\n * The Graphics class is primarily used to render primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.  However, you can also use a Graphics\n * object to build a list of primitives to use as a mask, or as a complex hitArea.\n * @memberof scene\n * @extends scene.Container\n */\nexport class Graphics extends Container implements View, Instruction\n{\n    public readonly canBundle = true;\n    public readonly renderPipeId = 'graphics';\n    public batched: boolean;\n\n    public _roundPixels: 0 | 1 = 0;\n\n    public _didGraphicsUpdate: boolean;\n\n    private _context: GraphicsContext;\n    private readonly _ownedContext: GraphicsContext;\n\n    /**\n     * @param options - Options for the Graphics.\n     */\n    constructor(options?: GraphicsOptions | GraphicsContext)\n    {\n        if (options instanceof GraphicsContext)\n        {\n            options = { context: options };\n        }\n\n        const { context, roundPixels, ...rest } = options || {};\n\n        super({\n            label: 'Graphics',\n            ...rest\n        });\n\n        if (!context)\n        {\n            this._context = this._ownedContext = new GraphicsContext();\n        }\n        else\n        {\n            this._context = context;\n        }\n\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.allowChildren = false;\n        this.roundPixels = roundPixels ?? false;\n    }\n\n    set context(context: GraphicsContext)\n    {\n        if (context === this._context) return;\n\n        this._context.off('update', this.onViewUpdate, this);\n\n        this._context = context;\n\n        // TODO store this bound function somewhere else..\n        this._context.on('update', this.onViewUpdate, this);\n\n        this.onViewUpdate();\n    }\n\n    get context(): GraphicsContext\n    {\n        return this._context;\n    }\n\n    /**\n     * The local bounds of the graphic.\n     * @type {rendering.Bounds}\n     */\n    get bounds(): Bounds\n    {\n        return this._context.bounds;\n    }\n\n    /**\n     * Adds the bounds of this object to the bounds object.\n     * @param bounds - The output bounds object.\n     */\n    public addBounds(bounds: Bounds)\n    {\n        bounds.addBounds(this._context.bounds);\n    }\n\n    /**\n     * Checks if the object contains the given point.\n     * @param point - The point to check\n     */\n    public containsPoint(point: PointData)\n    {\n        return this._context.containsPoint(point);\n    }\n\n    /**\n     *  Whether or not to round the x/y position of the graphic.\n     * @type {boolean}\n     */\n    get roundPixels()\n    {\n        return !!this._roundPixels;\n    }\n\n    set roundPixels(value: boolean)\n    {\n        this._roundPixels = value ? 1 : 0;\n    }\n\n    protected onViewUpdate()\n    {\n        // increment from the 12th bit!\n        this._didChangeId += 1 << 12;\n        this._didGraphicsUpdate = true;\n\n        if (this.didViewUpdate) return;\n        this.didViewUpdate = true;\n\n        if (this.renderGroup)\n        {\n            this.renderGroup.onChildViewUpdate(this);\n        }\n    }\n\n    /**\n     * Destroys this graphics renderable and optionally its context.\n     * @param options - Options parameter. A boolean will act as if all options\n     *\n     * If the context was created by this graphics and `destroy(false)` or `destroy()` is called\n     * then the context will still be destroyed.\n     *\n     * If you want to explicitly not destroy this context that this graphics created,\n     * then you should pass destroy({ context: false })\n     *\n     * If the context was passed in as an argument to the constructor then it will not be destroyed\n     * @param {boolean} [options.texture=false] - Should destroy the texture of the graphics context\n     * @param {boolean} [options.textureSource=false] - Should destroy the texture source of the graphics context\n     * @param {boolean} [options.context=false] - Should destroy the context\n     */\n    public destroy(options?: DestroyOptions): void\n    {\n        if (this._ownedContext && !options)\n        {\n            this._ownedContext.destroy(options);\n        }\n        else if (options === true || (options as ContextDestroyOptions)?.context === true)\n        {\n            this._context.destroy(options);\n        }\n\n        (this._ownedContext as null) = null;\n        this._context = null;\n\n        super.destroy(options);\n    }\n\n    private _callContextMethod(method: keyof GraphicsContext, args: any[]): this\n    {\n        (this.context as any)[method](...args);\n\n        return this;\n    }\n\n    // --------------------------------------- GraphicsContext methods ---------------------------------------\n    /**\n     * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n     * pattern, or a more complex style defined by a FillStyle object.\n     * @param {FillStyleInputs} args - The fill style to apply. This can be a simple color, a gradient or\n     * pattern object, or a FillStyle or ConvertedFillStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setFillStyle(...args: Parameters<GraphicsContext['setFillStyle']>): this\n    {\n        return this._callContextMethod('setFillStyle', args);\n    }\n\n    /**\n     * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n     * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     * @param {FillStyleInputs} args - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n     * or a StrokeStyle or ConvertedStrokeStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setStrokeStyle(...args: Parameters<GraphicsContext['setStrokeStyle']>): this\n    {\n        return this._callContextMethod('setStrokeStyle', args);\n    }\n\n    /**\n     * Fills the current or given path with the current fill style. This method can optionally take\n     * a color and alpha for a simple fill, or a more complex FillStyleInputs object for advanced fills.\n     * @param {FillStyleInputs} style - (Optional) The style to fill the path with. Can be a color, gradient, pattern, or a\n     * complex style object. If omitted, uses the current fill style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public fill(style?: FillStyleInputs): this;\n    /** @deprecated 8.0.0 */\n    public fill(color: ColorSource, alpha: number): this;\n    public fill(...args: [FillStyleInputs, ColorSource?]): this\n    {\n        return this._callContextMethod('fill', args);\n    }\n    /**\n     * Strokes the current path with the current stroke style. This method can take an optional\n     * FillStyleInputs parameter to define the stroke's appearance, including its color, width, and other properties.\n     * @param {FillStyleInputs} args - (Optional) The stroke style to apply. Can be defined as a simple color or a more\n     * complex style object. If omitted, uses the current stroke style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public stroke(...args: Parameters<GraphicsContext['stroke']>): this\n    {\n        return this._callContextMethod('stroke', args);\n    }\n    /**\n     * Adds a texture to the graphics context. This method supports multiple overloads for specifying the texture,\n     * tint, and dimensions. If only a texture is provided, it uses the texture's width and height for drawing.\n     * Additional parameters allow for specifying a tint color, and custom dimensions for the texture drawing area.\n     * @param texture - The Texture object to use.\n     * @param tint - (Optional) A ColorSource to tint the texture. If not provided, defaults to white (0xFFFFFF).\n     * @param dx - (Optional) The x-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dy - (Optional) The y-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dw - (Optional) The width of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame width.\n     * @param dh - (Optional) The height of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame height.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public texture(texture: Texture, tint?: ColorSource, dx?: number, dy?: number, dw?: number, dh?: number): this;\n    public texture(texture: Texture): this;\n    public texture(...args: [Texture, number?, number?, number?, number?, number?]): this\n    {\n        return this._callContextMethod('texture', args);\n    }\n    /**\n     * Resets the current path. Any previous path and its commands are discarded and a new path is\n     * started. This is typically called before beginning a new shape or series of drawing commands.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public beginPath(): this\n    {\n        return this._callContextMethod('beginPath', []);\n    }\n    /**\n     * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n     * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n     * fail to cut correctly!\n     */\n    public cut(): this\n    {\n        return this._callContextMethod('cut', []);\n    }\n    /**\n     * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n     * starting and ending angles, and direction.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The arc's radius.\n     * @param startAngle - The starting angle, in radians.\n     * @param endAngle - The ending angle, in radians.\n     * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise\n     * (false). Defaults to false.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;\n    public arc(...args: Parameters<GraphicsContext['arc']>): this\n    {\n        return this._callContextMethod('arc', args);\n    }\n    /**\n     * Adds an arc to the current path with the given control points and radius, connected to the previous point\n     * by a straight line if necessary.\n     * @param x1 - The x-coordinate of the first control point.\n     * @param y1 - The y-coordinate of the first control point.\n     * @param x2 - The x-coordinate of the second control point.\n     * @param y2 - The y-coordinate of the second control point.\n     * @param radius - The arc's radius.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\n    public arcTo(...args: Parameters<GraphicsContext['arcTo']>): this\n    {\n        return this._callContextMethod('arcTo', args);\n    }\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number\n    ): this;\n    public arcToSvg(...args: Parameters<GraphicsContext['arcToSvg']>): this\n    {\n        return this._callContextMethod('arcToSvg', args);\n    }\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number, smoothness?: number\n    ): this;\n    public bezierCurveTo(...args: Parameters<GraphicsContext['bezierCurveTo']>): this\n    {\n        return this._callContextMethod('bezierCurveTo', args);\n    }\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        return this._callContextMethod('closePath', []);\n    }\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number): this;\n    public ellipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        return this._callContextMethod('ellipse', args);\n    }\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number): this;\n    public circle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        return this._callContextMethod('circle', args);\n    }\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @returns The instance of the current object for chaining.\n     */\n    public path(path: GraphicsPath): this;\n    public path(...args: Parameters<GraphicsContext['path']>): this\n    {\n        return this._callContextMethod('path', args);\n    }\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this;\n    public lineTo(...args: Parameters<GraphicsContext['lineTo']>): this\n    {\n        return this._callContextMethod('lineTo', args);\n    }\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this;\n    public moveTo(...args: Parameters<GraphicsContext['moveTo']>): this\n    {\n        return this._callContextMethod('moveTo', args);\n    }\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cpx - The x-coordinate of the control point.\n     * @param cpy - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this;\n    public quadraticCurveTo(...args: Parameters<GraphicsContext['quadraticCurveTo']>): this\n    {\n        return this._callContextMethod('quadraticCurveTo', args);\n    }\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number): this;\n    public rect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        return this._callContextMethod('rect', args);\n    }\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number): this;\n    public roundRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        return this._callContextMethod('roundRect', args);\n    }\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates, of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public poly(points: number[] | PointData[], close?: boolean): this;\n    public poly(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        return this._callContextMethod('poly', args);\n    }\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation?: number, transform?: Matrix): this;\n    public regularPoly(...args: Parameters<GraphicsContext['regularPoly']>): this\n    {\n        return this._callContextMethod('regularPoly', args);\n    }\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this;\n    public roundPoly(...args: Parameters<GraphicsContext['roundPoly']>): this\n    {\n        return this._callContextMethod('roundPoly', args);\n    }\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this;\n    public roundShape(...args: Parameters<GraphicsContext['roundShape']>): this\n    {\n        return this._callContextMethod('roundShape', args);\n    }\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this;\n    public filletRect(...args: Parameters<GraphicsContext['filletRect']>): this\n    {\n        return this._callContextMethod('filletRect', args);\n    }\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this;\n    public chamferRect(...args: Parameters<GraphicsContext['chamferRect']>): this\n    {\n        return this._callContextMethod('chamferRect', args);\n    }\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public star(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number): this;\n    public star(...args: Parameters<GraphicsContext['star']>): this\n    {\n        return this._callContextMethod('star', args);\n    }\n    /**\n     * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n     * defined in SVG format to be drawn within the graphics context.\n     * @param svg - The SVG string to be parsed and rendered.\n     */\n    public svg(svg: string): this;\n    public svg(...args: Parameters<GraphicsContext['svg']>): this\n    {\n        return this._callContextMethod('svg', args);\n    }\n    /**\n     * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n     * This includes transformations, fill styles, and stroke styles.\n     */\n    public restore(): this;\n    public restore(...args: Parameters<GraphicsContext['restore']>): this\n    {\n        return this._callContextMethod('restore', args);\n    }\n    /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n    public save(): this\n    {\n        return this._callContextMethod('save', []);\n    }\n    /**\n     * Returns the current transformation matrix of the graphics context.\n     * @returns The current transformation matrix.\n     */\n    public getTransform(): Matrix\n    {\n        return this.context.getTransform();\n    }\n    /**\n     * Resets the current transformation matrix to the identity matrix, effectively removing\n     * any transformations (rotation, scaling, translation) previously applied.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public resetTransform(): this\n    {\n        return this._callContextMethod('resetTransform', []);\n    }\n    /**\n     * Applies a rotation transformation to the graphics context around the current origin.\n     * @param angle - The angle of rotation in radians.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public rotateTransform(angle: number): this;\n    public rotateTransform(...args: Parameters<GraphicsContext['rotate']>): this\n    {\n        return this._callContextMethod('rotate', args);\n    }\n    /**\n     * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n     * @param x - The scale factor in the horizontal direction.\n     * @param y - (Optional) The scale factor in the vertical direction.\n     * If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public scaleTransform(x: number, y?: number): this;\n    public scaleTransform(...args: Parameters<GraphicsContext['scale']>): this\n    {\n        return this._callContextMethod('scale', args);\n    }\n    /**\n     * Sets the current transformation matrix of the graphics context to the specified matrix or values.\n     * This replaces the current transformation matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(transform: Matrix): this;\n    public setTransform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public setTransform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public setTransform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('setTransform', args);\n    }\n    /**\n     * Applies the specified transformation matrix to the current graphics context by multiplying\n     * the current matrix with the specified matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(transform: Matrix): this;\n    public transform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public transform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this;\n    public transform(...args: [Matrix] | [number, number, number, number, number, number]): this\n    {\n        return this._callContextMethod('transform', args);\n    }\n    /**\n     * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n     * @param x - The amount to translate in the horizontal direction.\n     * @param y - (Optional) The amount to translate in the vertical direction. If not specified,\n     * the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public translateTransform(x: number, y?: number): this;\n    public translateTransform(...args: Parameters<GraphicsContext['translate']>): this\n    {\n        return this._callContextMethod('translate', args);\n    }\n    /**\n     * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n     * and optionally resetting transformations to the identity matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public clear(): this\n    {\n        return this._callContextMethod('clear', []);\n    }\n    /**\n     * The fill style to use.\n     * @type {ConvertedFillStyle}\n     */\n    get fillStyle(): GraphicsContext['fillStyle']\n    {\n        return this._context.fillStyle;\n    }\n    set fillStyle(value: FillStyleInputs)\n    {\n        this._context.fillStyle = value;\n    }\n    /**\n     * The stroke style to use.\n     * @type {ConvertedStrokeStyle}\n     */\n    get strokeStyle(): GraphicsContext['strokeStyle']\n    {\n        return this._context.strokeStyle;\n    }\n    set strokeStyle(value: FillStyleInputs)\n    {\n        this._context.strokeStyle = value;\n    }\n\n    /**\n     * Creates a new Graphics object.\n     * Note that only the context of the object is cloned, not its transform (position,scale,etc)\n     * @param deep - Whether to create a deep clone of the graphics object. If false, the context\n     * will be shared between the two objects (default false). If true, the context will be\n     * cloned (recommended if you need to modify the context in any way).\n     * @returns - A clone of the graphics object\n     */\n    public clone(deep = false): Graphics\n    {\n        if (deep)\n        {\n            return new Graphics(this._context.clone());\n        }\n\n        (this._ownedContext as null) = null;\n        const clone = new Graphics(this._context);\n\n        return clone;\n    }\n\n    // -------- v7 deprecations ---------\n\n    /**\n     * @param width\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#setStrokeStyle} instead\n     */\n    public lineStyle(width?: number, color?: ColorSource, alpha?: number): this\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.');\n        // #endif\n\n        const strokeStyle: Partial<StrokeStyle> = {};\n\n        // avoid undefined assignment\n        width && (strokeStyle.width = width);\n        color && (strokeStyle.color = color);\n        alpha && (strokeStyle.alpha = alpha);\n\n        this.context.strokeStyle = strokeStyle;\n\n        return this;\n    }\n\n    /**\n     * @param color\n     * @param alpha\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public beginFill(color: ColorSource, alpha?: number)\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        const fillStyle: Partial<FillStyle> = {};\n\n        // avoid undefined assignment\n        color && (fillStyle.color = color);\n        alpha && (fillStyle.alpha = alpha);\n\n        this.context.fillStyle = fillStyle;\n\n        return this;\n    }\n\n    /**\n     * @deprecated since 8.0.0 Use {@link Graphics#fill} instead\n     */\n    public endFill()\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.');\n        // #endif\n\n        this.context.fill();\n        const strokeStyle = this.context.strokeStyle;\n\n        if (strokeStyle.width !== GraphicsContext.defaultStrokeStyle.width\n            || strokeStyle.color !== GraphicsContext.defaultStrokeStyle.color\n            || strokeStyle.alpha !== GraphicsContext.defaultStrokeStyle.alpha)\n        {\n            this.context.stroke();\n        }\n\n        return this;\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#circle} instead\n     */\n    public drawCircle(...args: Parameters<GraphicsContext['circle']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawCircle has been renamed to Graphics#circle');\n        // #endif\n\n        return this._callContextMethod('circle', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#ellipse} instead\n     */\n    public drawEllipse(...args: Parameters<GraphicsContext['ellipse']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawEllipse has been renamed to Graphics#ellipse');\n        // #endif\n\n        return this._callContextMethod('ellipse', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#poly} instead\n     */\n    public drawPolygon(...args: Parameters<GraphicsContext['poly']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawPolygon has been renamed to Graphics#poly');\n        // #endif\n\n        return this._callContextMethod('poly', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#rect} instead\n     */\n    public drawRect(...args: Parameters<GraphicsContext['rect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRect has been renamed to Graphics#rect');\n        // #endif\n\n        return this._callContextMethod('rect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#roundRect} instead\n     */\n    public drawRoundedRect(...args: Parameters<GraphicsContext['roundRect']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawRoundedRect has been renamed to Graphics#roundRect');\n        // #endif\n\n        return this._callContextMethod('roundRect', args);\n    }\n\n    /**\n     * @param {...any} args\n     * @deprecated since 8.0.0 Use {@link Graphics#star} instead\n     */\n    public drawStar(...args: Parameters<GraphicsContext['star']>): this\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Graphics#drawStar has been renamed to Graphics#star');\n        // #endif\n\n        return this._callContextMethod('star', args);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}