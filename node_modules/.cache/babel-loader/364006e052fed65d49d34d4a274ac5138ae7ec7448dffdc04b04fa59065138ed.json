{"ast":null,"code":"import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\"use strict\";\nconst findMixin = {\n  /**\n   * The instance label of the object.\n   * @memberof scene.Container#\n   * @member {string} label\n   */\n  label: null,\n  /**\n   * The instance name of the object.\n   * @deprecated since 8.0.0\n   * @see scene.Container#label\n   * @member {string} name\n   * @memberof scene.Container#\n   */\n  get name() {\n    deprecation(v8_0_0, \"Container.name property has been removed, use Container.label instead\");\n    return this.label;\n  },\n  set name(value) {\n    deprecation(v8_0_0, \"Container.name property has been removed, use Container.label instead\");\n    this.label = value;\n  },\n  /**\n   * @method getChildByName\n   * @deprecated since 8.0.0\n   * @param {string} name - Instance name.\n   * @param {boolean}[deep=false] - Whether to search recursively\n   * @returns {Container} The child with the specified name.\n   * @see scene.Container#getChildByLabel\n   * @memberof scene.Container#\n   */\n  getChildByName(name) {\n    let deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.getChildByLabel(name, deep);\n  },\n  /**\n   * Returns the first child in the container with the specified label.\n   *\n   * Recursive searches are done in a pre-order traversal.\n   * @memberof scene.Container#\n   * @param {string|RegExp} label - Instance label.\n   * @param {boolean}[deep=false] - Whether to search recursively\n   * @returns {Container} The child with the specified label.\n   */\n  getChildByLabel(label) {\n    let deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.label === label || label instanceof RegExp && label.test(child.label)) return child;\n    }\n    if (deep) {\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        const found = child.getChildByLabel(label, true);\n        if (found) {\n          return found;\n        }\n      }\n    }\n    return null;\n  },\n  /**\n   * Returns all children in the container with the specified label.\n   * @memberof scene.Container#\n   * @param {string|RegExp} label - Instance label.\n   * @param {boolean}[deep=false] - Whether to search recursively\n   * @param {Container[]} [out=[]] - The array to store matching children in.\n   * @returns {Container[]} An array of children with the specified label.\n   */\n  getChildrenByLabel(label) {\n    let deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let out = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.label === label || label instanceof RegExp && label.test(child.label)) {\n        out.push(child);\n      }\n    }\n    if (deep) {\n      for (let i = 0; i < children.length; i++) {\n        children[i].getChildrenByLabel(label, true, out);\n      }\n    }\n    return out;\n  }\n};\nexport { findMixin };","map":{"version":3,"names":["findMixin","label","name","deprecation","v8_0_0","value","getChildByName","deep","arguments","length","undefined","getChildByLabel","children","i","child","RegExp","test","found","getChildrenByLabel","out","push"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/scene/container/container-mixins/findMixin.ts"],"sourcesContent":["import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Container } from '../Container';\n\nexport interface FindMixinConstructor\n{\n    label?: string;\n}\nexport interface FindMixin extends Required<FindMixinConstructor>\n{\n    /**\n     * @deprecated since 8.0.0\n     * @see Container#label\n     */\n    name: string;\n    getChildByName(label: RegExp | string, deep?: boolean): Container | null;\n    getChildByLabel(label: RegExp | string, deep?: boolean): Container | null;\n    getChildrenByLabel(label: RegExp | string, deep?: boolean, out?: Container[]): Container[];\n}\n\nexport const findMixin: Partial<Container> = {\n    /**\n     * The instance label of the object.\n     * @memberof scene.Container#\n     * @member {string} label\n     */\n    label: null,\n\n    /**\n     * The instance name of the object.\n     * @deprecated since 8.0.0\n     * @see scene.Container#label\n     * @member {string} name\n     * @memberof scene.Container#\n     */\n    get name(): string\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Container.name property has been removed, use Container.label instead');\n        // #endif\n\n        return this.label;\n    },\n    set name(value: string)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Container.name property has been removed, use Container.label instead');\n        // #endif\n\n        this.label = value;\n    },\n\n    /**\n     * @method getChildByName\n     * @deprecated since 8.0.0\n     * @param {string} name - Instance name.\n     * @param {boolean}[deep=false] - Whether to search recursively\n     * @returns {Container} The child with the specified name.\n     * @see scene.Container#getChildByLabel\n     * @memberof scene.Container#\n     */\n    getChildByName(name: string, deep = false): Container | null\n    {\n        return this.getChildByLabel(name, deep);\n    },\n    /**\n     * Returns the first child in the container with the specified label.\n     *\n     * Recursive searches are done in a pre-order traversal.\n     * @memberof scene.Container#\n     * @param {string|RegExp} label - Instance label.\n     * @param {boolean}[deep=false] - Whether to search recursively\n     * @returns {Container} The child with the specified label.\n     */\n    getChildByLabel(label: string | RegExp, deep = false): Container | null\n    {\n        const children = this.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            if (child.label === label || (label instanceof RegExp && label.test(child.label))) return child;\n        }\n\n        if (deep)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                const child = children[i];\n                const found = child.getChildByLabel(label, true);\n\n                if (found)\n                {\n                    return found;\n                }\n            }\n        }\n\n        return null;\n    },\n\n    /**\n     * Returns all children in the container with the specified label.\n     * @memberof scene.Container#\n     * @param {string|RegExp} label - Instance label.\n     * @param {boolean}[deep=false] - Whether to search recursively\n     * @param {Container[]} [out=[]] - The array to store matching children in.\n     * @returns {Container[]} An array of children with the specified label.\n     */\n    getChildrenByLabel(label: string | RegExp, deep = false, out = []): Container[]\n    {\n        const children = this.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            if (child.label === label || (label instanceof RegExp && label.test(child.label)))\n            {\n                out.push(child);\n            }\n        }\n\n        if (deep)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                children[i].getChildrenByLabel(label, true, out);\n            }\n        }\n\n        return out;\n    },\n} as Container;\n"],"mappings":";;AAoBO,MAAMA,SAAgC;EAAA;AAAA;AAAA;AAAA;AAAA;EAMzCC,KAAO;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASP,IAAIC,IACJA,CAAA;IAEIC,WAAA,CAAYC,MAAA,EAAQ,uEAAuE;IAG3F,OAAO,IAAK,CAAAH,KAAA;EAAA,CAChB;EACA,IAAIC,KAAKG,KACT;IAEIF,WAAA,CAAYC,MAAA,EAAQ,uEAAuE;IAG3F,KAAKH,KAAQ,GAAAI,KAAA;EAAA,CACjB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWAC,eAAeJ,IAAc,EAC7B;IAAA,IAD6BK,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAO,KACpC;IACW,YAAKG,eAAgB,CAAAT,IAAA,EAAMK,IAAI;EAAA,CAC1C;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAI,gBAAgBV,KAAwB,EACxC;IAAA,IADwCM,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAO,KAC/C;IACI,MAAMI,QAAA,GAAW,IAAK,CAAAA,QAAA;IAEtB,SAASC,CAAI,MAAGA,CAAI,GAAAD,QAAA,CAASH,MAAA,EAAQI,CACrC;MACU,MAAAC,KAAA,GAAQF,QAAA,CAASC,CAAC;MAEpB,IAAAC,KAAA,CAAMb,KAAA,KAAUA,KAAU,IAAAA,KAAA,YAAiBc,MAAA,IAAUd,KAAM,CAAAe,IAAA,CAAKF,KAAA,CAAMb,KAAK,GAAW,OAAAa,KAAA;IAAA;IAG9F,IAAIP,IACJ;MACI,SAASM,CAAI,MAAGA,CAAI,GAAAD,QAAA,CAASH,MAAA,EAAQI,CACrC;QACU,MAAAC,KAAA,GAAQF,QAAA,CAASC,CAAC;QACxB,MAAMI,KAAQ,GAAAH,KAAA,CAAMH,eAAgB,CAAAV,KAAA,EAAO,IAAI;QAE/C,IAAIgB,KACJ;UACW,OAAAA,KAAA;QAAA;MACX;IACJ;IAGG;EAAA,CACX;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAC,mBAAmBjB,KAAwB,EAC3C;IAAA,IAD2CM,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAO,KAAO;IAAA,IAAAW,GAAA,GAAAX,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAM,EAC/D;IACI,MAAMI,QAAA,GAAW,IAAK,CAAAA,QAAA;IAEtB,SAASC,CAAI,MAAGA,CAAI,GAAAD,QAAA,CAASH,MAAA,EAAQI,CACrC;MACU,MAAAC,KAAA,GAAQF,QAAA,CAASC,CAAC;MAEpB,IAAAC,KAAA,CAAMb,KAAA,KAAUA,KAAU,IAAAA,KAAA,YAAiBc,MAAA,IAAUd,KAAM,CAAAe,IAAA,CAAKF,KAAM,CAAAb,KAAK,CAC/E;QACIkB,GAAA,CAAIC,IAAA,CAAKN,KAAK;MAAA;IAClB;IAGJ,IAAIP,IACJ;MACI,SAASM,CAAI,MAAGA,CAAI,GAAAD,QAAA,CAASH,MAAA,EAAQI,CACrC;QACID,QAAA,CAASC,CAAC,EAAEK,kBAAmB,CAAAjB,KAAA,EAAO,MAAMkB,GAAG;MAAA;IACnD;IAGG,OAAAA,GAAA;EAAA;AAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}