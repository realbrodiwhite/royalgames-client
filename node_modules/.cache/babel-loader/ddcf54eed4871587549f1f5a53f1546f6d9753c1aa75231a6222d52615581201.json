{"ast":null,"code":"import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart(_ref) {\n    let {\n      target,\n      clear,\n      clearColor,\n      frame\n    } = _ref;\n    this._renderTargetStack.length = 0;\n    this.push(target, clear, clearColor, frame);\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface) {\n    let clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let clearColor = arguments.length > 2 ? arguments[2] : undefined;\n    let frame = arguments.length > 3 ? arguments[3] : undefined;\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(this.projectionMatrix, 0, 0, viewport.width / source.resolution, viewport.height / source.resolution, !renderTarget.isRoot);\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target) {\n    let clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CLEAR.ALL;\n    let clearColor = arguments.length > 2 ? arguments[2] : undefined;\n    if (!clear) return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(target || this.renderTarget, clear, clearColor, this.viewport);\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface) {\n    let clear = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CLEAR.ALL;\n    let clearColor = arguments.length > 2 ? arguments[2] : undefined;\n    let frame = arguments.length > 3 ? arguments[3] : undefined;\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    var _this$_renderSurfaceT;\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return (_this$_renderSurfaceT = this._renderSurfaceToRenderTargetHash.get(renderSurface)) !== null && _this$_renderSurfaceT !== void 0 ? _this$_renderSurfaceT : this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const {\n      pixelWidth,\n      pixelHeight\n    } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest);\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface);\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (CanvasSource.test(renderSurface.source.resource)) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n}\nexport { RenderTargetSystem };","map":{"version":3,"names":["RenderTargetSystem","constructor","renderer","rootViewPort","Rectangle","viewport","onRenderTargetChange","SystemRunner","projectionMatrix","Matrix","defaultClearColor","_renderSurfaceToRenderTargetHash","Map","_gpuRenderTargetHash","Object","create","_renderTargetStack","_renderer","finishRenderPass","adaptor","renderTarget","renderStart","_ref","target","clear","clearColor","frame","length","push","copyFrom","rootRenderTarget","renderingToScreen","isRenderingToScreen","bind","renderSurface","arguments","undefined","getRenderTarget","didChange","gpuRenderTarget","getGpuRenderTarget","pixelWidth","width","pixelHeight","height","resizeGpuRenderTarget","source","colorTexture","Texture","resolution","_resolution","x","y","calculateProjection","isRoot","startRenderPass","emit","CLEAR","ALL","contextChange","pop","currentRenderTargetData","_this$_renderSurfaceT","isTexture","get","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","size","originDest","Math","min","ensureDepthStencil","stencil","destroy","forEach","key","CanvasSource","test","getCanvasTexture","RenderTarget","TextureSource","colorTextures","resource","once","uid","destroyGpuRenderTarget","set","initGpuRenderTarget"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTargetSystem.ts"],"sourcesContent":["import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { CLEAR } from '../../gl/const';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection';\nimport { SystemRunner } from '../system/SystemRunner';\nimport { CanvasSource } from '../texture/sources/CanvasSource';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\nimport { isRenderingToScreen } from './isRenderingToScreen';\nimport { RenderTarget } from './RenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { GlRenderTarget } from '../../gl/GlRenderTarget';\nimport type { GpuRenderTarget } from '../../gpu/renderTarget/GpuRenderTarget';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * A render surface is a texture, canvas, or render target\n * @memberof rendering\n * @see environment.ICanvas\n * @see rendering.Texture\n * @see rendering.RenderTarget\n */\nexport type RenderSurface = ICanvas | BindableTexture | RenderTarget;\n\n/**\n * stores a render target and its frame\n * @ignore\n */\ninterface RenderTargetAndFrame\n{\n    /** the render target */\n    renderTarget: RenderTarget;\n    /** the frame to use when using the render target */\n    frame: Rectangle\n}\n\n/**\n * An adaptor interface for RenderTargetSystem to support WebGL and WebGPU.\n * This is used internally by the renderer, and is not intended to be used directly.\n * @ignore\n */\nexport interface RenderTargetAdaptor<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget>\n{\n    init(\n        /** the renderer */\n        renderer: Renderer,\n        /** the render target system */\n        renderTargetSystem: RenderTargetSystem<RENDER_TARGET>\n    ): void\n\n    /** A function copies the contents of a render surface to a texture */\n    copyToTexture(\n        /** the render surface to copy from  */\n        sourceRenderSurfaceTexture: RenderTarget,\n        /** the texture to copy to */\n        destinationTexture: Texture,\n        /** the origin of the copy */\n        originSrc: { x: number; y: number },\n        /** the size of the copy */\n        size: { width: number; height: number },\n        /** the destination origin (top left to paste from!) */\n        originDest?: { x: number; y: number },\n    ): Texture\n\n    /** starts a render pass on the render target */\n    startRenderPass(\n        /** the render target to start the render pass on */\n        renderTarget: RenderTarget,\n        /* the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111* */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** clears the current render target to the specified color */\n    clear(\n        /** the render target to clear */\n        renderTarget: RenderTarget,\n        /** the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111 */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to   */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** finishes the current render pass */\n    finishRenderPass(renderTarget: RenderTarget): void\n\n    /**\n     * initializes a gpu render target. Both renderers use this function to initialize a gpu render target\n     * Its different type of object depending on the renderer.\n     */\n    initGpuRenderTarget(\n        /** the render target to initialize */\n        renderTarget: RenderTarget\n    ): RENDER_TARGET\n\n    /** called when a render target is resized */\n    resizeGpuRenderTarget(\n        /** the render target to resize */\n        renderTarget: RenderTarget\n    ): void\n\n    /** destroys the gpu render target */\n    destroyGpuRenderTarget(\n        /** the render target to destroy */\n        gpuRenderTarget: RENDER_TARGET\n    ): void\n}\n\n/**\n * A system that manages render targets. A render target is essentially a place where the shaders can color in the pixels.\n * The render target system is responsible for binding the render target to the renderer, and managing the viewport.\n * Render targets can be pushed and popped.\n *\n * To make it easier, you can also bind textures and canvases too. This will automatically create a render target for you.\n * The render target itself is a lot more powerful than just a texture or canvas,\n * as it can have multiple textures attached to it.\n * It will also give ou fine grain control over the stencil buffer / depth texture.\n * @example\n *\n * ```js\n *\n * // create a render target\n * const renderTarget = new RenderTarget({\n *   colorTextures: [new TextureSource({ width: 100, height: 100 })],\n * });\n *\n * // bind the render target\n * renderer.renderTarget.bind(renderTarget);\n *\n * // draw something!\n * ```\n * @memberof rendering\n */\nexport class RenderTargetSystem<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget> implements System\n{\n    /** When rendering of a scene begins, this is where the root render surface is stored */\n    public rootRenderTarget: RenderTarget;\n    /** This is the root viewport for the render pass*/\n    public rootViewPort = new Rectangle();\n    /** A boolean that lets the dev know if the current render pass is rendering to the screen. Used by some plugins */\n    public renderingToScreen: boolean;\n    /** the current active render target */\n    public renderTarget: RenderTarget;\n    /** the current active render surface that the render target is created from */\n    public renderSurface: RenderSurface;\n    /** the current viewport that the gpu is using */\n    public readonly viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    public readonly onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    public readonly projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    public readonly defaultClearColor: RgbaArray = [0, 0, 0, 0];\n    /** a reference to the adaptor that interfaces with WebGL / WebGP */\n    public readonly adaptor: RenderTargetAdaptor<RENDER_TARGET>;\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    private readonly _renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget>\n        = new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    private _gpuRenderTargetHash: Record<number, RENDER_TARGET> = Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    private readonly _renderTargetStack: RenderTargetAndFrame[] = [];\n    /** A reference to the renderer */\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /** called when dev wants to finish a render pass */\n    public finishRenderPass()\n    {\n        this.adaptor.finishRenderPass(this.renderTarget);\n    }\n\n    /**\n     * called when the renderer starts to render a scene.\n     * @param options\n     * @param options.target - the render target to render to\n     * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param options.clearColor - the color to clear to\n     * @param options.frame - the frame to render to\n     */\n    public renderStart({\n        target,\n        clear,\n        clearColor,\n        frame\n    }: {\n        target: RenderSurface;\n        clear: CLEAR_OR_BOOL;\n        clearColor: RgbaArray;\n        frame?: Rectangle\n    }): void\n    {\n        // TODO no need to reset this - use optimised index instead\n        this._renderTargetStack.length = 0;\n\n        this.push(\n            target,\n            clear,\n            clearColor,\n            frame\n        );\n\n        this.rootViewPort.copyFrom(this.viewport);\n        this.rootRenderTarget = this.renderTarget;\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    }\n\n    /**\n     * Binding a render surface! This is the main function of the render target system.\n     * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n     * Once bound all draw calls will be rendered to the render surface.\n     *\n     * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n     * @param renderSurface - the render surface to bind\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to render to\n     * @returns the render target that was bound\n     */\n    public bind(\n        renderSurface: RenderSurface,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    ): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        const didChange = this.renderTarget !== renderTarget;\n\n        this.renderTarget = renderTarget;\n        this.renderSurface = renderSurface;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.pixelWidth !== gpuRenderTarget.width\n            || renderTarget.pixelHeight !== gpuRenderTarget.height)\n        {\n            this.adaptor.resizeGpuRenderTarget(renderTarget);\n\n            gpuRenderTarget.width = renderTarget.pixelWidth;\n            gpuRenderTarget.height = renderTarget.pixelHeight;\n        }\n\n        const source = renderTarget.colorTexture;\n        const viewport = this.viewport;\n\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n\n        if (!frame && renderSurface instanceof Texture)\n        {\n            frame = renderSurface.frame;\n        }\n\n        if (frame)\n        {\n            const resolution = source._resolution;\n\n            viewport.x = ((frame.x * resolution) + 0.5) | 0;\n            viewport.y = ((frame.y * resolution) + 0.5) | 0;\n            viewport.width = ((frame.width * resolution) + 0.5) | 0;\n            viewport.height = ((frame.height * resolution) + 0.5) | 0;\n        }\n        else\n        {\n            viewport.x = 0;\n            viewport.y = 0;\n            viewport.width = pixelWidth;\n            viewport.height = pixelHeight;\n        }\n\n        calculateProjection(\n            this.projectionMatrix,\n            0, 0,\n            viewport.width / source.resolution,\n            viewport.height / source.resolution,\n            !renderTarget.isRoot\n        );\n\n        this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n\n        if (didChange)\n        {\n            this.onRenderTargetChange.emit(renderTarget);\n        }\n\n        return renderTarget;\n    }\n\n    public clear(\n        target?: RenderSurface,\n        clear: CLEAR_OR_BOOL = CLEAR.ALL,\n        clearColor?: RgbaArray,\n    )\n    {\n        if (!clear) return;\n\n        if (target)\n        {\n            target = this.getRenderTarget(target);\n        }\n\n        this.adaptor.clear(\n            (target as RenderTarget) || this.renderTarget,\n            clear,\n            clearColor,\n            this.viewport\n        );\n    }\n\n    protected contextChange(): void\n    {\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    /**\n     * Push a render surface to the renderer. This will bind the render surface to the renderer,\n     * @param renderSurface - the render surface to push\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to use when rendering to the render surface\n     */\n    public push(\n        renderSurface: RenderSurface,\n        clear: CLEAR | boolean = CLEAR.ALL,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    )\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n\n        this._renderTargetStack.push({\n            renderTarget,\n            frame,\n        });\n\n        return renderTarget;\n    }\n\n    /** Pops the current render target from the renderer and restores the previous render target. */\n    public pop()\n    {\n        this._renderTargetStack.pop();\n\n        const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n\n        this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n    }\n\n    /**\n     * Gets the render target from the provide render surface. Eg if its a texture,\n     * it will return the render target for the texture.\n     * If its a render target, it will return the same render target.\n     * @param renderSurface - the render surface to get the render target for\n     * @returns the render target for the render surface\n     */\n    public getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        if (((renderSurface as Texture).isTexture))\n        {\n            renderSurface = (renderSurface as Texture).source;\n        }\n\n        return this._renderSurfaceToRenderTargetHash.get(renderSurface)\n        ?? this._initRenderTarget(renderSurface);\n    }\n\n    /**\n     * Copies a render surface to another texture\n     * @param sourceRenderSurfaceTexture - the render surface to copy from\n     * @param destinationTexture - the texture to copy to\n     * @param originSrc - the origin of the copy\n     * @param originSrc.x - the x origin of the copy\n     * @param originSrc.y - the y origin of the copy\n     * @param size - the size of the copy\n     * @param size.width - the width of the copy\n     * @param size.height - the height of the copy\n     * @param originDest - the destination origin (top left to paste from!)\n     * @param originDest.x - the x origin of the paste\n     * @param originDest.y - the y origin of the paste\n     */\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number },\n        size: { width: number; height: number },\n        originDest: { x: number; y: number; },\n    )\n    {\n        // fit the size to the source we don't want to go out of bounds\n\n        if (originSrc.x < 0)\n        {\n            size.width += originSrc.x;\n            originDest.x -= originSrc.x;\n            originSrc.x = 0;\n        }\n\n        if (originSrc.y < 0)\n        {\n            size.height += originSrc.y;\n            originDest.y -= originSrc.y;\n            originSrc.y = 0;\n        }\n\n        const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n\n        size.width = Math.min(size.width, pixelWidth - originSrc.x);\n        size.height = Math.min(size.height, pixelHeight - originSrc.y);\n\n        return this.adaptor.copyToTexture(\n            sourceRenderSurfaceTexture,\n            destinationTexture,\n            originSrc,\n            size,\n            originDest\n        );\n    }\n\n    /**\n     * ensures that we have a depth stencil buffer available to render to\n     * This is used by the mask system to make sure we have a stencil buffer.\n     */\n    public ensureDepthStencil()\n    {\n        if (!this.renderTarget.stencil)\n        {\n            this.renderTarget.stencil = true;\n\n            this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n        }\n    }\n\n    /** nukes the render target system */\n    public destroy()\n    {\n        (this._renderer as null) = null;\n\n        this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) =>\n        {\n            if (renderTarget !== key)\n            {\n                renderTarget.destroy();\n            }\n        });\n\n        this._renderSurfaceToRenderTargetHash.clear();\n\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    private _initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget: RenderTarget = null;\n\n        if (CanvasSource.test(renderSurface))\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas);\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof TextureSource)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n            });\n\n            if (CanvasSource.test(renderSurface.source.resource))\n            {\n                renderTarget.isRoot = true;\n            }\n\n            // TODO add a test for this\n            renderSurface.once('destroy', () =>\n            {\n                renderTarget.destroy();\n\n                const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n\n                if (gpuRenderTarget)\n                {\n                    this._gpuRenderTargetHash[renderTarget.uid] = null;\n                    this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n                }\n            });\n        }\n\n        this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    public getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return this._gpuRenderTargetHash[renderTarget.uid]\n        || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}