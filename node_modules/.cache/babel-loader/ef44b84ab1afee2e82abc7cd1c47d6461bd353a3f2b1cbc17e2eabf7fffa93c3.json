{"ast":null,"code":"import { DOMAdapter } from '../../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\"use strict\";\nclass CanvasSource extends TextureSource {\n  constructor(options) {\n    if (!options.resource) {\n      options.resource = DOMAdapter.get().createCanvas();\n    }\n    if (!options.width) {\n      options.width = options.resource.width;\n      if (!options.autoDensity) {\n        options.width /= options.resolution;\n      }\n    }\n    if (!options.height) {\n      options.height = options.resource.height;\n      if (!options.autoDensity) {\n        options.height /= options.resolution;\n      }\n    }\n    super(options);\n    this.uploadMethodId = \"image\";\n    this.autoDensity = options.autoDensity;\n    const canvas = options.resource;\n    if (this.pixelWidth !== canvas.width || this.pixelWidth !== canvas.height) {\n      this.resizeCanvas();\n    }\n    this.transparent = !!options.transparent;\n  }\n  resizeCanvas() {\n    if (this.autoDensity) {\n      this.resource.style.width = \"\".concat(this.width, \"px\");\n      this.resource.style.height = \"\".concat(this.height, \"px\");\n    }\n    if (this.resource.width !== this.pixelWidth || this.resource.height !== this.pixelHeight) {\n      this.resource.width = this.pixelWidth;\n      this.resource.height = this.pixelHeight;\n    }\n  }\n  resize() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.width;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.height;\n    let resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._resolution;\n    const didResize = super.resize(width, height, resolution);\n    if (didResize) {\n      this.resizeCanvas();\n    }\n    return didResize;\n  }\n  static test(resource) {\n    return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement || globalThis.OffscreenCanvas && resource instanceof OffscreenCanvas;\n  }\n}\nCanvasSource.extension = ExtensionType.TextureSource;\nexport { CanvasSource };","map":{"version":3,"names":["CanvasSource","TextureSource","constructor","options","resource","DOMAdapter","get","createCanvas","width","autoDensity","resolution","height","uploadMethodId","canvas","pixelWidth","resizeCanvas","transparent","style","concat","pixelHeight","resize","arguments","length","undefined","_resolution","didResize","test","globalThis","HTMLCanvasElement","OffscreenCanvas","extension","ExtensionType"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/rendering/renderers/shared/texture/sources/CanvasSource.ts"],"sourcesContent":["import { DOMAdapter } from '../../../../../environment/adapter';\nimport { ExtensionType } from '../../../../../extensions/Extensions';\nimport { TextureSource } from './TextureSource';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { ExtensionMetadata } from '../../../../../extensions/Extensions';\nimport type { TextureSourceOptions } from './TextureSource';\n\nexport interface CanvasSourceOptions extends TextureSourceOptions<ICanvas>\n{\n    /** should the canvas be resized to preserve its screen width and height regardless of the resolution of the renderer */\n    autoDensity?: boolean;\n    /** if true, this canvas will be set up to be transparent where possible */\n    transparent?: boolean;\n}\n\nexport class CanvasSource extends TextureSource<ICanvas>\n{\n    public static extension: ExtensionMetadata = ExtensionType.TextureSource;\n\n    public uploadMethodId = 'image';\n    public autoDensity: boolean;\n    public transparent: boolean;\n\n    constructor(options: CanvasSourceOptions)\n    {\n        if (!options.resource)\n        {\n            options.resource = DOMAdapter.get().createCanvas();\n        }\n\n        if (!options.width)\n        {\n            options.width = options.resource.width;\n\n            if (!options.autoDensity)\n            {\n                options.width /= options.resolution;\n            }\n        }\n\n        if (!options.height)\n        {\n            options.height = options.resource.height;\n\n            if (!options.autoDensity)\n            {\n                options.height /= options.resolution;\n            }\n        }\n\n        super(options);\n\n        this.autoDensity = options.autoDensity;\n\n        const canvas = options.resource;\n\n        if (this.pixelWidth !== canvas.width || this.pixelWidth !== canvas.height)\n        {\n            this.resizeCanvas();\n        }\n\n        this.transparent = !!options.transparent;\n    }\n\n    public resizeCanvas()\n    {\n        if (this.autoDensity)\n        {\n            this.resource.style.width = `${this.width}px`;\n            this.resource.style.height = `${this.height}px`;\n        }\n\n        // only resize if wee need to, as this clears the canvas (even if values are set to the same)\n        if (this.resource.width !== this.pixelWidth || this.resource.height !== this.pixelHeight)\n        {\n            this.resource.width = this.pixelWidth;\n            this.resource.height = this.pixelHeight;\n        }\n    }\n\n    public resize(width = this.width, height = this.height, resolution = this._resolution): boolean\n    {\n        const didResize = super.resize(width, height, resolution);\n\n        if (didResize)\n        {\n            this.resizeCanvas();\n        }\n\n        return didResize;\n    }\n\n    public static test(resource: any): resource is ICanvas\n    {\n        return (globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement)\n        || (globalThis.OffscreenCanvas && resource instanceof OffscreenCanvas);\n    }\n}\n"],"mappings":";;;;AAgBO,MAAMA,YAAA,SAAqBC,aAClC;EAOIC,YAAYC,OACZ;IACQ,KAACA,OAAA,CAAQC,QACb;MACID,OAAA,CAAQC,QAAW,GAAAC,UAAA,CAAWC,GAAI,GAAEC,YAAa;IAAA;IAGjD,KAACJ,OAAA,CAAQK,KACb;MACYL,OAAA,CAAAK,KAAA,GAAQL,OAAA,CAAQC,QAAS,CAAAI,KAAA;MAE7B,KAACL,OAAA,CAAQM,WACb;QACIN,OAAA,CAAQK,KAAA,IAASL,OAAQ,CAAAO,UAAA;MAAA;IAC7B;IAGA,KAACP,OAAA,CAAQQ,MACb;MACYR,OAAA,CAAAQ,MAAA,GAASR,OAAA,CAAQC,QAAS,CAAAO,MAAA;MAE9B,KAACR,OAAA,CAAQM,WACb;QACIN,OAAA,CAAQQ,MAAA,IAAUR,OAAQ,CAAAO,UAAA;MAAA;IAC9B;IAGJ,MAAMP,OAAO;IA/BjB,KAAOS,cAAiB;IAiCpB,KAAKH,WAAA,GAAcN,OAAQ,CAAAM,WAAA;IAE3B,MAAMI,MAAA,GAASV,OAAQ,CAAAC,QAAA;IAEvB,IAAI,KAAKU,UAAe,KAAAD,MAAA,CAAOL,KAAA,IAAS,IAAK,CAAAM,UAAA,KAAeD,MAAA,CAAOF,MACnE;MACI,KAAKI,YAAa;IAAA;IAGjB,KAAAC,WAAA,GAAc,CAAC,CAACb,OAAQ,CAAAa,WAAA;EAAA;EAG1BD,YACPA,CAAA;IACI,IAAI,KAAKN,WACT;MACI,KAAKL,QAAS,CAAAa,KAAA,CAAMT,KAAQ,MAAAU,MAAA,CAAG,KAAKV,KAAK;MACzC,KAAKJ,QAAS,CAAAa,KAAA,CAAMN,MAAS,MAAAO,MAAA,CAAG,KAAKP,MAAM;IAAA;IAI3C,SAAKP,QAAA,CAASI,KAAU,UAAKM,UAAA,IAAc,IAAK,CAAAV,QAAA,CAASO,MAAW,UAAKQ,WAC7E;MACS,KAAAf,QAAA,CAASI,KAAA,GAAQ,IAAK,CAAAM,UAAA;MACtB,KAAAV,QAAA,CAASO,MAAA,GAAS,IAAK,CAAAQ,WAAA;IAAA;EAChC;EAGGC,OAAA,EACP;IAAA,IADcZ,KAAA,GAAAa,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQ,IAAK,CAAAb,KAAA;IAAA,IAAOG,MAAA,GAAAU,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAS,IAAK,CAAAV,MAAA;IAAA,IAAQD,UAAa,GAAAW,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,WAAKG,WAC1E;IACI,MAAMC,SAAY,SAAML,MAAO,CAAAZ,KAAA,EAAOG,MAAA,EAAQD,UAAU;IAExD,IAAIe,SACJ;MACI,KAAKV,YAAa;IAAA;IAGf,OAAAU,SAAA;EAAA;EAGX,OAAcC,KAAKtB,QACnB;IACI,OAAQuB,UAAA,CAAWC,iBAAqB,IAAAxB,QAAA,YAAoBwB,iBACxD,IAAAD,UAAA,CAAWE,eAAA,IAAmBzB,QAAoB,YAAAyB,eAAA;EAAA;AAE9D;AAlFa7B,YAAA,CAEK8B,SAAA,GAA+BC,aAAc,CAAA9B,aAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}