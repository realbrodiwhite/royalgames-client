{"ast":null,"code":"import { extend, colord } from '@pixi/colord';\nimport namesPlugin from '@pixi/colord/plugins/names';\n\"use strict\";\nextend([namesPlugin]);\nconst _Color = class _Color {\n  /**\n   * @param {ColorSource} value - Optional value to use, if not provided, white is used.\n   */\n  constructor() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16777215;\n    this._value = null;\n    this._components = new Float32Array(4);\n    this._components.fill(1);\n    this._int = 16777215;\n    this.value = value;\n  }\n  /** Get red component (0 - 1) */\n  get red() {\n    return this._components[0];\n  }\n  /** Get green component (0 - 1) */\n  get green() {\n    return this._components[1];\n  }\n  /** Get blue component (0 - 1) */\n  get blue() {\n    return this._components[2];\n  }\n  /** Get alpha component (0 - 1) */\n  get alpha() {\n    return this._components[3];\n  }\n  /**\n   * Set the value, suitable for chaining\n   * @param value\n   * @see Color.value\n   */\n  setValue(value) {\n    this.value = value;\n    return this;\n  }\n  /**\n   * The current color source.\n   *\n   * When setting:\n   * - Setting to an instance of `Color` will copy its color source and components.\n   * - Otherwise, `Color` will try to normalize the color source and set the components.\n   *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n   *\n   * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n   * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n   *\n   * When getting:\n   * - A return value of `null` means the previous value was overridden (e.g., {@link Color.multiply multiply},\n   *   {@link Color.premultiply premultiply} or {@link Color.round round}).\n   * - Otherwise, the color source used when setting is returned.\n   */\n  set value(value) {\n    if (value instanceof _Color) {\n      this._value = this._cloneSource(value._value);\n      this._int = value._int;\n      this._components.set(value._components);\n    } else if (value === null) {\n      throw new Error(\"Cannot set Color#value to null\");\n    } else if (this._value === null || !this._isSourceEqual(this._value, value)) {\n      this._normalize(value);\n      this._value = this._cloneSource(value);\n    }\n  }\n  get value() {\n    return this._value;\n  }\n  /**\n   * Copy a color source internally.\n   * @param value - Color source\n   */\n  _cloneSource(value) {\n    if (typeof value === \"string\" || typeof value === \"number\" || value instanceof Number || value === null) {\n      return value;\n    } else if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      return value.slice(0);\n    } else if (typeof value === \"object\" && value !== null) {\n      return {\n        ...value\n      };\n    }\n    return value;\n  }\n  /**\n   * Equality check for color sources.\n   * @param value1 - First color source\n   * @param value2 - Second color source\n   * @returns `true` if the color sources are equal, `false` otherwise.\n   */\n  _isSourceEqual(value1, value2) {\n    const type1 = typeof value1;\n    const type2 = typeof value2;\n    if (type1 !== type2) {\n      return false;\n    } else if (type1 === \"number\" || type1 === \"string\" || value1 instanceof Number) {\n      return value1 === value2;\n    } else if (Array.isArray(value1) && Array.isArray(value2) || ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2)) {\n      if (value1.length !== value2.length) {\n        return false;\n      }\n      return value1.every((v, i) => v === value2[i]);\n    } else if (value1 !== null && value2 !== null) {\n      const keys1 = Object.keys(value1);\n      const keys2 = Object.keys(value2);\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      return keys1.every(key => value1[key] === value2[key]);\n    }\n    return value1 === value2;\n  }\n  /**\n   * Convert to a RGBA color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n   */\n  toRgba() {\n    const [r, g, b, a] = this._components;\n    return {\n      r,\n      g,\n      b,\n      a\n    };\n  }\n  /**\n   * Convert to a RGB color object.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n   */\n  toRgb() {\n    const [r, g, b] = this._components;\n    return {\n      r,\n      g,\n      b\n    };\n  }\n  /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n  toRgbaString() {\n    const [r, g, b] = this.toUint8RgbArray();\n    return \"rgba(\".concat(r, \",\").concat(g, \",\").concat(b, \",\").concat(this.alpha, \")\");\n  }\n  toUint8RgbArray(out) {\n    const [r, g, b] = this._components;\n    if (!this._arrayRgb) {\n      this._arrayRgb = [];\n    }\n    out = out || this._arrayRgb;\n    out[0] = Math.round(r * 255);\n    out[1] = Math.round(g * 255);\n    out[2] = Math.round(b * 255);\n    return out;\n  }\n  toArray(out) {\n    if (!this._arrayRgba) {\n      this._arrayRgba = [];\n    }\n    out = out || this._arrayRgba;\n    const [r, g, b, a] = this._components;\n    out[0] = r;\n    out[1] = g;\n    out[2] = b;\n    out[3] = a;\n    return out;\n  }\n  toRgbArray(out) {\n    if (!this._arrayRgb) {\n      this._arrayRgb = [];\n    }\n    out = out || this._arrayRgb;\n    const [r, g, b] = this._components;\n    out[0] = r;\n    out[1] = g;\n    out[2] = b;\n    return out;\n  }\n  /**\n   * Convert to a hexadecimal number.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toNumber(); // returns 16777215\n   */\n  toNumber() {\n    return this._int;\n  }\n  /**\n   * Convert to a BGR number\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color(0xffcc99).toBgrNumber(); // returns 0x99ccff\n   */\n  toBgrNumber() {\n    const [r, g, b] = this.toUint8RgbArray();\n    return (b << 16) + (g << 8) + r;\n  }\n  /**\n   * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n   * @returns {number} - The color as a number in little endian format.\n   */\n  toLittleEndianNumber() {\n    const value = this._int;\n    return (value >> 16) + (value & 65280) + ((value & 255) << 16);\n  }\n  /**\n   * Multiply with another color. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param {ColorSource} value - The color to multiply by.\n   */\n  multiply(value) {\n    const [r, g, b, a] = _Color._temp.setValue(value)._components;\n    this._components[0] *= r;\n    this._components[1] *= g;\n    this._components[2] *= b;\n    this._components[3] *= a;\n    this._refreshInt();\n    this._value = null;\n    return this;\n  }\n  /**\n   * Converts color to a premultiplied alpha format. This action is destructive, and will\n   * override the previous `value` property to be `null`.\n   * @param alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {Color} - Itself.\n   */\n  premultiply(alpha) {\n    let applyToRGB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (applyToRGB) {\n      this._components[0] *= alpha;\n      this._components[1] *= alpha;\n      this._components[2] *= alpha;\n    }\n    this._components[3] = alpha;\n    this._refreshInt();\n    this._value = null;\n    return this;\n  }\n  /**\n   * Premultiplies alpha with current color.\n   * @param {number} alpha - The alpha to multiply by.\n   * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n   * @returns {number} tint multiplied by alpha\n   */\n  toPremultiplied(alpha) {\n    let applyToRGB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (alpha === 1) {\n      return (255 << 24) + this._int;\n    }\n    if (alpha === 0) {\n      return applyToRGB ? 0 : this._int;\n    }\n    let r = this._int >> 16 & 255;\n    let g = this._int >> 8 & 255;\n    let b = this._int & 255;\n    if (applyToRGB) {\n      r = r * alpha + 0.5 | 0;\n      g = g * alpha + 0.5 | 0;\n      b = b * alpha + 0.5 | 0;\n    }\n    return (alpha * 255 << 24) + (r << 16) + (g << 8) + b;\n  }\n  /**\n   * Convert to a hexidecimal string.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHex(); // returns \"#ffffff\"\n   */\n  toHex() {\n    const hexString = this._int.toString(16);\n    return \"#\".concat(\"000000\".substring(0, 6 - hexString.length) + hexString);\n  }\n  /**\n   * Convert to a hexidecimal string with alpha.\n   * @example\n   * import { Color } from 'pixi.js';\n   * new Color('white').toHexa(); // returns \"#ffffffff\"\n   */\n  toHexa() {\n    const alphaValue = Math.round(this._components[3] * 255);\n    const alphaString = alphaValue.toString(16);\n    return this.toHex() + \"00\".substring(0, 2 - alphaString.length) + alphaString;\n  }\n  /**\n   * Set alpha, suitable for chaining.\n   * @param alpha\n   */\n  setAlpha(alpha) {\n    this._components[3] = this._clamp(alpha);\n    return this;\n  }\n  /**\n   * Normalize the input value into rgba\n   * @param value - Input value\n   */\n  _normalize(value) {\n    let r;\n    let g;\n    let b;\n    let a;\n    if ((typeof value === \"number\" || value instanceof Number) && value >= 0 && value <= 16777215) {\n      const int = value;\n      r = (int >> 16 & 255) / 255;\n      g = (int >> 8 & 255) / 255;\n      b = (int & 255) / 255;\n      a = 1;\n    } else if ((Array.isArray(value) || value instanceof Float32Array) && value.length >= 3 && value.length <= 4) {\n      value = this._clamp(value);\n      [r, g, b, a = 1] = value;\n    } else if ((value instanceof Uint8Array || value instanceof Uint8ClampedArray) && value.length >= 3 && value.length <= 4) {\n      value = this._clamp(value, 0, 255);\n      [r, g, b, a = 255] = value;\n      r /= 255;\n      g /= 255;\n      b /= 255;\n      a /= 255;\n    } else if (typeof value === \"string\" || typeof value === \"object\") {\n      if (typeof value === \"string\") {\n        const match = _Color.HEX_PATTERN.exec(value);\n        if (match) {\n          value = \"#\".concat(match[2]);\n        }\n      }\n      const color = colord(value);\n      if (color.isValid()) {\n        ({\n          r,\n          g,\n          b,\n          a\n        } = color.rgba);\n        r /= 255;\n        g /= 255;\n        b /= 255;\n      }\n    }\n    if (r !== void 0) {\n      this._components[0] = r;\n      this._components[1] = g;\n      this._components[2] = b;\n      this._components[3] = a;\n      this._refreshInt();\n    } else {\n      throw new Error(\"Unable to convert color \".concat(value));\n    }\n  }\n  /** Refresh the internal color rgb number */\n  _refreshInt() {\n    this._clamp(this._components);\n    const [r, g, b] = this._components;\n    this._int = (r * 255 << 16) + (g * 255 << 8) + (b * 255 | 0);\n  }\n  /**\n   * Clamps values to a range. Will override original values\n   * @param value - Value(s) to clamp\n   * @param min - Minimum value\n   * @param max - Maximum value\n   */\n  _clamp(value) {\n    let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (typeof value === \"number\") {\n      return Math.min(Math.max(value, min), max);\n    }\n    value.forEach((v, i) => {\n      value[i] = Math.min(Math.max(v, min), max);\n    });\n    return value;\n  }\n  /**\n   * Check if the value is a color-like object\n   * @param value - Value to check\n   * @returns True if the value is a color-like object\n   * @static\n   * @example\n   * import { Color } from 'pixi.js';\n   * Color.isColorLike('white'); // returns true\n   * Color.isColorLike(0xffffff); // returns true\n   * Color.isColorLike([1, 1, 1]); // returns true\n   */\n  static isColorLike(value) {\n    return typeof value === \"number\" || typeof value === \"string\" || value instanceof Number || value instanceof _Color || Array.isArray(value) || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Float32Array || value.r !== void 0 && value.g !== void 0 && value.b !== void 0 || value.r !== void 0 && value.g !== void 0 && value.b !== void 0 && value.a !== void 0 || value.h !== void 0 && value.s !== void 0 && value.l !== void 0 || value.h !== void 0 && value.s !== void 0 && value.l !== void 0 && value.a !== void 0 || value.h !== void 0 && value.s !== void 0 && value.v !== void 0 || value.h !== void 0 && value.s !== void 0 && value.v !== void 0 && value.a !== void 0;\n  }\n};\n/**\n * Default Color object for static uses\n * @example\n * import { Color } from 'pixi.js';\n * Color.shared.setValue(0xffffff).toHex(); // '#ffffff'\n */\n_Color.shared = new _Color();\n/**\n * Temporary Color object for static uses internally.\n * As to not conflict with Color.shared.\n * @ignore\n */\n_Color._temp = new _Color();\n/** Pattern for hex strings */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n_Color.HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\nlet Color = _Color;\nexport { Color };","map":{"version":3,"names":["extend","namesPlugin","_Color","constructor","value","arguments","length","undefined","_value","_components","Float32Array","fill","_int","red","green","blue","alpha","setValue","_cloneSource","set","Error","_isSourceEqual","_normalize","Number","Array","isArray","ArrayBuffer","isView","slice","value1","value2","type1","type2","every","v","i","keys1","Object","keys","keys2","key","toRgba","r","g","b","a","toRgb","toRgbaString","toUint8RgbArray","concat","out","_arrayRgb","Math","round","toArray","_arrayRgba","toRgbArray","toNumber","toBgrNumber","toLittleEndianNumber","multiply","_temp","_refreshInt","premultiply","applyToRGB","toPremultiplied","toHex","hexString","toString","substring","toHexa","alphaValue","alphaString","setAlpha","_clamp","int","Uint8Array","Uint8ClampedArray","match","HEX_PATTERN","exec","color","colord","isValid","rgba","min","max","forEach","isColorLike","h","s","l","shared","Color"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/color/Color.ts"],"sourcesContent":["import { colord, extend } from '@pixi/colord';\nimport namesPlugin from '@pixi/colord/plugins/names';\n\nimport type { AnyColor, HslaColor, HslColor, HsvaColor, HsvColor, RgbaColor, RgbColor } from '@pixi/colord';\n\nextend([namesPlugin]);\n\n/**\n * Pixi supports multiple color formats, including CSS color strings, hex, numbers, and arrays.\n *\n * When providing values for any of the color properties, you can use any of the {@link color.ColorSource} formats.\n * ```typescript\n * import { Color } from 'pixi.js';\n *\n * // All of these are valid:\n * sprite.tint = 'red';\n * sprite.tint = 0xff0000;\n * sprite.tint = '#ff0000';\n * sprite.tint = new Color('red');\n *\n * // Same for graphics fill/stroke colors and other  color values:\n * graphics.fill({ color: 'red' });\n * graphics.fill({ color: 0xff0000 });\n * graphics.stroke({ color: '#ff0000' });\n * graphics.stroke({ color: new Color('red')};\n * ```\n * @namespace color\n */\n\n/**\n * RGBA color array.\n *\n * `[number, number, number, number]`\n * @memberof color\n */\nexport type RgbaArray = [number, number, number, number];\n\n/**\n * Valid formats to use when defining any color properties, also valid for the {@link color.Color} constructor.\n *\n * These types are extended from [colord](https://www.npmjs.com/package/colord) with some PixiJS-specific extensions.\n *\n * Possible value types are:\n * - [Color names](https://www.w3.org/TR/css-color-4/#named-colors):\n *   `'red'`, `'green'`, `'blue'`, `'white'`, etc.\n * - RGB hex integers (`0xRRGGBB`):\n *   `0xff0000`, `0x00ff00`, `0x0000ff`, etc.\n * - [RGB(A) hex strings](https://www.w3.org/TR/css-color-4/#hex-notation):\n *   - 6 digits (`RRGGBB`): `'ff0000'`, `'#00ff00'`, `'0x0000ff'`, etc.\n *   - 3 digits (`RGB`): `'f00'`, `'#0f0'`, `'0x00f'`, etc.\n *   - 8 digits (`RRGGBBAA`): `'ff000080'`, `'#00ff0080'`, `'0x0000ff80'`, etc.\n *   - 4 digits (`RGBA`): `'f008'`, `'#0f08'`, `'0x00f8'`, etc.\n * - RGB(A) objects:\n *   `{ r: 255, g: 0, b: 0 }`, `{ r: 255, g: 0, b: 0, a: 0.5 }`, etc.\n * - [RGB(A) strings](https://www.w3.org/TR/css-color-4/#rgb-functions):\n *   `'rgb(255, 0, 0)'`, `'rgb(100% 0% 0%)'`, `'rgba(255, 0, 0, 0.5)'`, `'rgba(100% 0% 0% / 50%)'`, etc.\n * - RGB(A) arrays:\n *   `[1, 0, 0]`, `[1, 0, 0, 0.5]`, etc.\n * - RGB(A) Float32Array:\n *   `new Float32Array([1, 0, 0])`, `new Float32Array([1, 0, 0, 0.5])`, etc.\n * - RGB(A) Uint8Array:\n *   `new Uint8Array([255, 0, 0])`, `new Uint8Array([255, 0, 0, 128])`, etc.\n * - RGB(A) Uint8ClampedArray:\n *   `new Uint8ClampedArray([255, 0, 0])`, `new Uint8ClampedArray([255, 0, 0, 128])`, etc.\n * - HSL(A) objects:\n *   `{ h: 0, s: 100, l: 50 }`, `{ h: 0, s: 100, l: 50, a: 0.5 }`, etc.\n * - [HSL(A) strings](https://www.w3.org/TR/css-color-4/#the-hsl-notation):\n *   `'hsl(0, 100%, 50%)'`, `'hsl(0deg 100% 50%)'`, `'hsla(0, 100%, 50%, 0.5)'`, `'hsla(0deg 100% 50% / 50%)'`, etc.\n * - HSV(A) objects:\n *   `{ h: 0, s: 100, v: 100 }`, `{ h: 0, s: 100, v: 100, a: 0.5 }`, etc.\n * - {@link color.Color} objects.\n * @since 7.2.0\n * @memberof color\n */\nexport type ColorSource =\n    | string\n    | number\n    | number[]\n    | Float32Array\n    | Uint8Array\n    | Uint8ClampedArray\n    | HslColor\n    | HslaColor\n    | HsvColor\n    | HsvaColor\n    | RgbColor\n    | RgbaColor\n    | Color\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    | Number;\n\ntype ColorSourceTypedArray = Float32Array | Uint8Array | Uint8ClampedArray;\n\n/**\n * Color utility class. Can accept any {@link color.ColorSource} format in its constructor.\n * ```js\n * import { Color } from 'pixi.js';\n *\n * new Color('red').toArray(); // [1, 0, 0, 1]\n * new Color(0xff0000).toArray(); // [1, 0, 0, 1]\n * new Color('ff0000').toArray(); // [1, 0, 0, 1]\n * new Color('#f00').toArray(); // [1, 0, 0, 1]\n * new Color('0xff0000ff').toArray(); // [1, 0, 0, 1]\n * new Color('#f00f').toArray(); // [1, 0, 0, 1]\n * new Color({ r: 255, g: 0, b: 0, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('rgb(255, 0, 0, 0.5)').toArray(); // [1, 0, 0, 0.5]\n * new Color([1, 1, 1]).toArray(); // [1, 1, 1, 1]\n * new Color([1, 0, 0, 0.5]).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Float32Array([1, 0, 0, 0.5])).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Uint8Array([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color(new Uint8ClampedArray([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color({ h: 0, s: 100, l: 50, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('hsl(0, 100%, 50%, 50%)').toArray(); // [1, 0, 0, 0.5]\n * new Color({ h: 0, s: 100, v: 100, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * ```\n * @since 7.2.0\n * @memberof color\n */\nexport class Color\n{\n    /**\n     * Default Color object for static uses\n     * @example\n     * import { Color } from 'pixi.js';\n     * Color.shared.setValue(0xffffff).toHex(); // '#ffffff'\n     */\n    public static readonly shared = new Color();\n\n    /**\n     * Temporary Color object for static uses internally.\n     * As to not conflict with Color.shared.\n     * @ignore\n     */\n    private static readonly _temp = new Color();\n\n    /** Pattern for hex strings */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static readonly HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\n\n    /** Internal color source, from constructor or set value */\n    private _value: Exclude<ColorSource, Color> | null;\n\n    /** Normalized rgba component, floats from 0-1 */\n    private _components: Float32Array;\n\n    /** Cache color as number */\n    private _int: number;\n\n    /** An array of the current Color. Only populated when `toArray` functions are called */\n    private _arrayRgba: number[] | null;\n    private _arrayRgb: number[] | null;\n\n    /**\n     * @param {ColorSource} value - Optional value to use, if not provided, white is used.\n     */\n    constructor(value: ColorSource = 0xffffff)\n    {\n        this._value = null;\n        this._components = new Float32Array(4);\n        this._components.fill(1);\n        this._int = 0xffffff;\n        this.value = value;\n    }\n\n    /** Get red component (0 - 1) */\n    get red(): number\n    {\n        return this._components[0];\n    }\n\n    /** Get green component (0 - 1) */\n    get green(): number\n    {\n        return this._components[1];\n    }\n\n    /** Get blue component (0 - 1) */\n    get blue(): number\n    {\n        return this._components[2];\n    }\n\n    /** Get alpha component (0 - 1) */\n    get alpha(): number\n    {\n        return this._components[3];\n    }\n\n    /**\n     * Set the value, suitable for chaining\n     * @param value\n     * @see Color.value\n     */\n    public setValue(value: ColorSource): this\n    {\n        this.value = value;\n\n        return this;\n    }\n\n    /**\n     * The current color source.\n     *\n     * When setting:\n     * - Setting to an instance of `Color` will copy its color source and components.\n     * - Otherwise, `Color` will try to normalize the color source and set the components.\n     *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n     *\n     * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n     * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n     *\n     * When getting:\n     * - A return value of `null` means the previous value was overridden (e.g., {@link Color.multiply multiply},\n     *   {@link Color.premultiply premultiply} or {@link Color.round round}).\n     * - Otherwise, the color source used when setting is returned.\n     */\n    set value(value: ColorSource | null)\n    {\n        // Support copying from other Color objects\n        if (value instanceof Color)\n        {\n            this._value = this._cloneSource(value._value);\n            this._int = value._int;\n            this._components.set(value._components);\n        }\n        else if (value === null)\n        {\n            throw new Error('Cannot set Color#value to null');\n        }\n        else if (this._value === null || !this._isSourceEqual(this._value, value))\n        {\n            this._normalize(value);\n            this._value = this._cloneSource(value);\n        }\n    }\n    get value(): Exclude<ColorSource, Color> | null\n    {\n        return this._value;\n    }\n\n    /**\n     * Copy a color source internally.\n     * @param value - Color source\n     */\n    private _cloneSource(value: Exclude<ColorSource, Color> | null): Exclude<ColorSource, Color> | null\n    {\n        if (typeof value === 'string' || typeof value === 'number' || value instanceof Number || value === null)\n        {\n            return value;\n        }\n        else if (Array.isArray(value) || ArrayBuffer.isView(value))\n        {\n            return value.slice(0);\n        }\n        else if (typeof value === 'object' && value !== null)\n        {\n            return { ...value };\n        }\n\n        return value;\n    }\n\n    /**\n     * Equality check for color sources.\n     * @param value1 - First color source\n     * @param value2 - Second color source\n     * @returns `true` if the color sources are equal, `false` otherwise.\n     */\n    private _isSourceEqual(value1: Exclude<ColorSource, Color>, value2: Exclude<ColorSource, Color>): boolean\n    {\n        const type1 = typeof value1;\n        const type2 = typeof value2;\n\n        // Mismatched types\n        if (type1 !== type2)\n        {\n            return false;\n        }\n        // Handle numbers/strings and things that extend Number\n        // important to do the instanceof Number first, as this is \"object\" type\n        else if (type1 === 'number' || type1 === 'string' || value1 instanceof Number)\n        {\n            return value1 === value2;\n        }\n        // Handle Arrays and TypedArrays\n        else if (\n            (Array.isArray(value1) && Array.isArray(value2))\n            || (ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2))\n        )\n        {\n            if (value1.length !== value2.length)\n            {\n                return false;\n            }\n\n            return value1.every((v, i) => v === value2[i]);\n        }\n        // Handle Objects\n        else if (value1 !== null && value2 !== null)\n        {\n            const keys1 = Object.keys(value1) as (keyof typeof value1)[];\n            const keys2 = Object.keys(value2) as (keyof typeof value2)[];\n\n            if (keys1.length !== keys2.length)\n            {\n                return false;\n            }\n\n            return keys1.every((key) => value1[key] === value2[key]);\n        }\n\n        return value1 === value2;\n    }\n\n    /**\n     * Convert to a RGBA color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n     */\n    public toRgba(): RgbaColor\n    {\n        const [r, g, b, a] = this._components;\n\n        return { r, g, b, a };\n    }\n\n    /**\n     * Convert to a RGB color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n     */\n    public toRgb(): RgbColor\n    {\n        const [r, g, b] = this._components;\n\n        return { r, g, b };\n    }\n\n    /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n    public toRgbaString(): string\n    {\n        const [r, g, b] = this.toUint8RgbArray();\n\n        return `rgba(${r},${g},${b},${this.alpha})`;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of clamped uint8 values (0 to 255).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toUint8RgbArray(); // returns [255, 255, 255]\n     * @param {number[]|Uint8Array|Uint8ClampedArray} [out] - Output array\n     */\n    public toUint8RgbArray(): number[];\n    public toUint8RgbArray<T extends number[] | Uint8Array | Uint8ClampedArray>(out: T): T;\n    public toUint8RgbArray<T extends number[] | Uint8Array | Uint8ClampedArray>(out?: T): T\n    {\n        const [r, g, b] = this._components;\n\n        if (!this._arrayRgb)\n        {\n            this._arrayRgb = [];\n        }\n\n        out = out || this._arrayRgb as T;\n\n        out[0] = Math.round(r * 255);\n        out[1] = Math.round(g * 255);\n        out[2] = Math.round(b * 255);\n\n        return out;\n    }\n\n    /**\n     * Convert to an [R, G, B, A] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toArray(); // returns [1, 1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    public toArray(): number[];\n    public toArray<T extends number[] | Float32Array>(out: T): T;\n    public toArray<T extends number[] | Float32Array>(out?: T): T\n    {\n        if (!this._arrayRgba)\n        {\n            this._arrayRgba = [];\n        }\n\n        out = out || this._arrayRgba as T;\n        const [r, g, b, a] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n        out[3] = a;\n\n        return out;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgbArray(); // returns [1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    public toRgbArray(): number[];\n    public toRgbArray<T extends number[] | Float32Array>(out: T): T;\n    public toRgbArray<T extends number[] | Float32Array>(out?: T): T\n    {\n        if (!this._arrayRgb)\n        {\n            this._arrayRgb = [];\n        }\n\n        out = out || this._arrayRgb as T;\n        const [r, g, b] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n\n        return out;\n    }\n\n    /**\n     * Convert to a hexadecimal number.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toNumber(); // returns 16777215\n     */\n    public toNumber(): number\n    {\n        return this._int;\n    }\n\n    /**\n     * Convert to a BGR number\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color(0xffcc99).toBgrNumber(); // returns 0x99ccff\n     */\n    public toBgrNumber(): number\n    {\n        const [r, g, b] = this.toUint8RgbArray();\n\n        return (b << 16) + (g << 8) + r;\n    }\n\n    /**\n     * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n     * @returns {number} - The color as a number in little endian format.\n     */\n    public toLittleEndianNumber(): number\n    {\n        const value = this._int;\n\n        return (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * Multiply with another color. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param {ColorSource} value - The color to multiply by.\n     */\n    public multiply(value: ColorSource): this\n    {\n        const [r, g, b, a] = Color._temp.setValue(value)._components;\n\n        this._components[0] *= r;\n        this._components[1] *= g;\n        this._components[2] *= b;\n        this._components[3] *= a;\n\n        this._refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Converts color to a premultiplied alpha format. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param alpha - The alpha to multiply by.\n     * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n     * @returns {Color} - Itself.\n     */\n    public premultiply(alpha: number, applyToRGB = true): this\n    {\n        if (applyToRGB)\n        {\n            this._components[0] *= alpha;\n            this._components[1] *= alpha;\n            this._components[2] *= alpha;\n        }\n        this._components[3] = alpha;\n\n        this._refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Premultiplies alpha with current color.\n     * @param {number} alpha - The alpha to multiply by.\n     * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n     * @returns {number} tint multiplied by alpha\n     */\n    public toPremultiplied(alpha: number, applyToRGB = true): number\n    {\n        if (alpha === 1.0)\n        {\n            return (0xff << 24) + this._int;\n        }\n        if (alpha === 0.0)\n        {\n            return applyToRGB ? 0 : this._int;\n        }\n        let r = (this._int >> 16) & 0xff;\n        let g = (this._int >> 8) & 0xff;\n        let b = this._int & 0xff;\n\n        if (applyToRGB)\n        {\n            r = ((r * alpha) + 0.5) | 0;\n            g = ((g * alpha) + 0.5) | 0;\n            b = ((b * alpha) + 0.5) | 0;\n        }\n\n        return ((alpha * 255) << 24) + (r << 16) + (g << 8) + b;\n    }\n\n    /**\n     * Convert to a hexidecimal string.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHex(); // returns \"#ffffff\"\n     */\n    public toHex(): string\n    {\n        const hexString = this._int.toString(16);\n\n        return `#${'000000'.substring(0, 6 - hexString.length) + hexString}`;\n    }\n\n    /**\n     * Convert to a hexidecimal string with alpha.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHexa(); // returns \"#ffffffff\"\n     */\n    public toHexa(): string\n    {\n        const alphaValue = Math.round(this._components[3] * 255);\n        const alphaString = alphaValue.toString(16);\n\n        return this.toHex() + '00'.substring(0, 2 - alphaString.length) + alphaString;\n    }\n\n    /**\n     * Set alpha, suitable for chaining.\n     * @param alpha\n     */\n    public setAlpha(alpha: number): this\n    {\n        this._components[3] = this._clamp(alpha);\n\n        return this;\n    }\n\n    /**\n     * Normalize the input value into rgba\n     * @param value - Input value\n     */\n    private _normalize(value: Exclude<ColorSource, Color>): void\n    {\n        let r: number | undefined;\n        let g: number | undefined;\n        let b: number | undefined;\n        let a: number | undefined;\n\n        // Number is a primative so typeof works fine, but in the case\n        // that someone creates a class that extends Number, we also\n        // need to check for instanceof Number\n        if (\n            (typeof value === 'number' || value instanceof Number)\n            && (value as number) >= 0\n            && (value as number) <= 0xffffff\n        )\n        {\n            const int = value as number; // cast required because instanceof Number is ambiguous for TS\n\n            r = ((int >> 16) & 0xff) / 255;\n            g = ((int >> 8) & 0xff) / 255;\n            b = (int & 0xff) / 255;\n            a = 1.0;\n        }\n        else if (\n            (Array.isArray(value) || value instanceof Float32Array)\n            // Can be rgb or rgba\n            && value.length >= 3\n            && value.length <= 4\n        )\n        {\n            // make sure all values are 0 - 1\n            value = this._clamp(value);\n            [r, g, b, a = 1.0] = value;\n        }\n        else if (\n            (value instanceof Uint8Array || value instanceof Uint8ClampedArray)\n            // Can be rgb or rgba\n            && value.length >= 3\n            && value.length <= 4\n        )\n        {\n            // make sure all values are 0 - 255\n            value = this._clamp(value, 0, 255);\n            [r, g, b, a = 255] = value;\n            r /= 255;\n            g /= 255;\n            b /= 255;\n            a /= 255;\n        }\n        else if (typeof value === 'string' || typeof value === 'object')\n        {\n            if (typeof value === 'string')\n            {\n                const match = Color.HEX_PATTERN.exec(value);\n\n                if (match)\n                {\n                    // Normalize hex string, remove 0x or # prefix\n                    value = `#${match[2]}`;\n                }\n            }\n\n            const color = colord(value as AnyColor);\n\n            if (color.isValid())\n            {\n                ({ r, g, b, a } = color.rgba);\n                r /= 255;\n                g /= 255;\n                b /= 255;\n            }\n        }\n\n        // Cache normalized values for rgba and hex integer\n        if (r !== undefined)\n        {\n            this._components[0] = r as number;\n            this._components[1] = g as number;\n            this._components[2] = b as number;\n            this._components[3] = a as number;\n            this._refreshInt();\n        }\n        else\n        {\n            throw new Error(`Unable to convert color ${value}`);\n        }\n    }\n\n    /** Refresh the internal color rgb number */\n    private _refreshInt(): void\n    {\n        // Clamp values to 0 - 1\n        this._clamp(this._components);\n\n        const [r, g, b] = this._components;\n\n        this._int = ((r * 255) << 16) + ((g * 255) << 8) + ((b * 255) | 0);\n    }\n\n    /**\n     * Clamps values to a range. Will override original values\n     * @param value - Value(s) to clamp\n     * @param min - Minimum value\n     * @param max - Maximum value\n     */\n    private _clamp<T extends number | number[] | ColorSourceTypedArray>(value: T, min = 0, max = 1): T\n    {\n        if (typeof value === 'number')\n        {\n            return Math.min(Math.max(value, min), max) as T;\n        }\n\n        value.forEach((v, i) =>\n        {\n            value[i] = Math.min(Math.max(v, min), max);\n        });\n\n        return value;\n    }\n\n    /**\n     * Check if the value is a color-like object\n     * @param value - Value to check\n     * @returns True if the value is a color-like object\n     * @static\n     * @example\n     * import { Color } from 'pixi.js';\n     * Color.isColorLike('white'); // returns true\n     * Color.isColorLike(0xffffff); // returns true\n     * Color.isColorLike([1, 1, 1]); // returns true\n     */\n    public static isColorLike(value: ColorSource): value is ColorSource\n    {\n        return (\n            typeof value === 'number'\n            || typeof value === 'string'\n            || value instanceof Number\n            || value instanceof Color\n            || Array.isArray(value)\n            || value instanceof Uint8Array\n            || value instanceof Uint8ClampedArray\n            || value instanceof Float32Array\n            || ((value as RgbColor).r !== undefined\n                && (value as RgbColor).g !== undefined\n                && (value as RgbColor).b !== undefined)\n            || ((value as RgbaColor).r !== undefined\n                && (value as RgbaColor).g !== undefined\n                && (value as RgbaColor).b !== undefined\n                && (value as RgbaColor).a !== undefined)\n            || ((value as HslColor).h !== undefined\n                && (value as HslColor).s !== undefined\n                && (value as HslColor).l !== undefined)\n            || ((value as HslaColor).h !== undefined\n                && (value as HslaColor).s !== undefined\n                && (value as HslaColor).l !== undefined\n                && (value as HslaColor).a !== undefined)\n            || ((value as HsvColor).h !== undefined\n                && (value as HsvColor).s !== undefined\n                && (value as HsvColor).v !== undefined)\n            || ((value as HsvaColor).h !== undefined\n                && (value as HsvaColor).s !== undefined\n                && (value as HsvaColor).v !== undefined\n                && (value as HsvaColor).a !== undefined)\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}