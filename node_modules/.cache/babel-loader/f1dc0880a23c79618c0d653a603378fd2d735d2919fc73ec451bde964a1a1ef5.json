{"ast":null,"code":"import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor() {\n    var _ref;\n    super({});\n    let options = (_ref = arguments.length <= 0 ? undefined : arguments[0]) !== null && _ref !== void 0 ? _ref : {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: arguments.length <= 1 ? undefined : arguments[1],\n        verticesX: arguments.length <= 2 ? undefined : arguments[2],\n        verticesY: arguments.length <= 3 ? undefined : arguments[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    var _this$verticesX, _this$verticesY, _this$width, _this$height;\n    options = {\n      ..._PlaneGeometry.defaultOptions,\n      ...options\n    };\n    this.verticesX = (_this$verticesX = this.verticesX) !== null && _this$verticesX !== void 0 ? _this$verticesX : options.verticesX;\n    this.verticesY = (_this$verticesY = this.verticesY) !== null && _this$verticesY !== void 0 ? _this$verticesY : options.verticesY;\n    this.width = (_this$width = this.width) !== null && _this$width !== void 0 ? _this$width : options.width;\n    this.height = (_this$height = this.height) !== null && _this$height !== void 0 ? _this$height : options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\nexport { PlaneGeometry };","map":{"version":3,"names":["_PlaneGeometry","MeshGeometry","constructor","_ref","options","arguments","length","undefined","deprecation","v8_0_0","width","height","verticesX","verticesY","build","_this$verticesX","_this$verticesY","_this$width","_this$height","defaultOptions","total","verts","uvs","indices","sizeX","sizeY","i","x","y","push","totalSub","xpos","ypos","value","value2","value3","value4","buffers","data","Float32Array","indexBuffer","Uint32Array","update","PlaneGeometry"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts"],"sourcesContent":["import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}