{"ast":null,"code":"\"use strict\";\n\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return \"\\n        for (let i = 0; i < \".concat(total, \"; i++) {\\n            data[offset + (((i / \").concat(col, \")|0) * 4) + (i % \").concat(col, \")] = v[i];\\n        }\\n    \");\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: \"\\n        data[offset] = v;\",\n  i32: \"\\n        data[offset] = v;\",\n  \"vec2<f32>\": \"\\n        data[offset] = v[0];\\n        data[offset + 1] = v[1];\",\n  \"vec3<f32>\": \"\\n        data[offset] = v[0];\\n        data[offset + 1] = v[1];\\n        data[offset + 2] = v[2];\",\n  \"vec4<f32>\": \"\\n        data[offset] = v[0];\\n        data[offset + 1] = v[1];\\n        data[offset + 2] = v[2];\\n        data[offset + 3] = v[3];\",\n  \"mat2x2<f32>\": \"\\n        data[offset] = v[0];\\n        data[offset + 1] = v[1];\\n        data[offset + 4] = v[2];\\n        data[offset + 5] = v[3];\",\n  \"mat3x3<f32>\": \"\\n        data[offset] = v[0];\\n        data[offset + 1] = v[1];\\n        data[offset + 2] = v[2];\\n        data[offset + 4] = v[3];\\n        data[offset + 5] = v[4];\\n        data[offset + 6] = v[5];\\n        data[offset + 8] = v[6];\\n        data[offset + 9] = v[7];\\n        data[offset + 10] = v[8];\",\n  \"mat4x4<f32>\": \"\\n        for (let i = 0; i < 16; i++) {\\n            data[offset + i] = v[i];\\n        }\",\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": \"\\n        data[offset] = v[0];\\n        data[offset + 1] = v[1];\\n        data[offset + 2] = v[2];\\n        data[offset + 3] = v[3];\\n    \"\n};\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };","map":{"version":3,"names":["loopMatrix","col","row","total","concat","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uboSyncFunctions.ts"],"sourcesContent":["import type { UNIFORM_TYPES_SINGLE } from '../types';\n\nfunction loopMatrix(col: number, row: number)\n{\n    const total = col * row;\n\n    return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\n\nexport const uboSyncFunctionsSTD40: Record<UNIFORM_TYPES_SINGLE, string> = {\n    f32: `\n        data[offset] = v;`,\n    i32: `\n        data[offset] = v;`,\n    'vec2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n    'vec3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n    'vec4<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n    'mat3x3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n    'mat4x4<f32>': `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n    'mat3x2<f32>': loopMatrix(3, 2),\n    'mat4x2<f32>': loopMatrix(4, 2),\n    'mat2x3<f32>': loopMatrix(2, 3),\n    'mat4x3<f32>': loopMatrix(4, 3),\n    'mat2x4<f32>': loopMatrix(2, 4),\n    'mat3x4<f32>': loopMatrix(3, 4),\n};\n\nexport const uboSyncFunctionsWGSL: Record<UNIFORM_TYPES_SINGLE, string> = {\n    ...uboSyncFunctionsSTD40,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `,\n};\n"],"mappings":";;AAEA,SAASA,WAAWC,GAAA,EAAaC,GACjC;EACI,MAAMC,KAAA,GAAQF,GAAM,GAAAC,GAAA;EAEb,wCAAAE,MAAA,CACmBD,KAAK,iDAAAC,MAAA,CACAH,GAAG,uBAAAG,MAAA,CAAoBH,GAAG;AAG7D;AAEO,MAAMI,qBAA8D;EACvEC,GAAK;EAELC,GAAK;EAEL,WAAa;EAGb,WAAa;EAIb,WAAa;EAKb,aAAe;EAKf,aAAe;EAUf,aAAe;EAIf,eAAeP,UAAW,IAAG,CAAC;EAC9B,eAAeA,UAAW,IAAG,CAAC;EAC9B,eAAeA,UAAW,IAAG,CAAC;EAC9B,eAAeA,UAAW,IAAG,CAAC;EAC9B,eAAeA,UAAW,IAAG,CAAC;EAC9B,eAAeA,UAAW,IAAG,CAAC;AAClC;AAEO,MAAMQ,oBAA6D;EACtE,GAAGH,qBAAA;EACH,aAAe;AAMnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}