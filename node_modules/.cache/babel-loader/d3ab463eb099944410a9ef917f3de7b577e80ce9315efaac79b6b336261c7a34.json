{"ast":null,"code":"\"use strict\";\n\nfunction buildUvs(vertices, verticesStride, verticesOffset, uvs, uvsOffset, uvsStride, size) {\n  let matrix = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  let index = 0;\n  verticesOffset *= verticesStride;\n  uvsOffset *= uvsStride;\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  while (index < size) {\n    const x = vertices[verticesOffset];\n    const y = vertices[verticesOffset + 1];\n    uvs[uvsOffset] = a * x + c * y + tx;\n    uvs[uvsOffset + 1] = b * x + d * y + ty;\n    uvsOffset += uvsStride;\n    verticesOffset += verticesStride;\n    index++;\n  }\n}\nfunction buildSimpleUvs(uvs, uvsOffset, uvsStride, size) {\n  let index = 0;\n  uvsOffset *= uvsStride;\n  while (index < size) {\n    uvs[uvsOffset] = 0;\n    uvs[uvsOffset + 1] = 0;\n    uvsOffset += uvsStride;\n    index++;\n  }\n}\nexport { buildSimpleUvs, buildUvs };","map":{"version":3,"names":["buildUvs","vertices","verticesStride","verticesOffset","uvs","uvsOffset","uvsStride","size","matrix","arguments","length","undefined","index","a","b","c","d","tx","ty","x","y","buildSimpleUvs"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/buildUvs.ts"],"sourcesContent":["import type { Matrix } from '../../../../../maths/matrix/Matrix';\n\n/**\n * Takes a vertices array and a matrix and transforms the vertices based on the matrix.\n * this out put is written to the uvs array\n * @param vertices - the vertices to calculate uvs from\n * @param verticesStride - the stride of the vertice\n * @param verticesOffset - the offset of the vertices\n * @param uvs - the uvs to fill\n * @param uvsOffset - the offset of the uvs\n * @param uvsStride - the stride of the uvs\n * @param size - the size of the vertices\n * @param matrix - the matrix to apply to the uvs\n * @memberof rendering\n */\nexport function buildUvs(\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    uvs: number[],\n    uvsOffset: number,\n    uvsStride: number,\n\n    size: number,\n    matrix: Matrix = null\n): void\n{\n    let index = 0;\n\n    verticesOffset *= verticesStride;\n    uvsOffset *= uvsStride;\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    while (index < size)\n    {\n        const x = vertices[verticesOffset];\n        const y = vertices[verticesOffset + 1];\n\n        uvs[uvsOffset] = (a * x) + (c * y) + tx;\n        uvs[uvsOffset + 1] = (b * x) + (d * y) + ty;\n\n        uvsOffset += uvsStride;\n\n        verticesOffset += verticesStride;\n\n        index++;\n    }\n}\n\nexport function buildSimpleUvs(\n    uvs: number[],\n    uvsOffset: number,\n    uvsStride: number,\n    size: number,\n)\n{\n    let index = 0;\n\n    uvsOffset *= uvsStride;\n\n    while (index < size)\n    {\n        uvs[uvsOffset] = 0;\n        uvs[uvsOffset + 1] = 0;\n\n        uvsOffset += uvsStride;\n\n        index++;\n    }\n}\n"],"mappings":";;AAegB,SAAAA,SACZC,QAAA,EACAC,cACA,EAAAC,cAAA,EAEAC,GAAA,EACAC,SACA,EAAAC,SAAA,EAEAC,IACA,EAEJ;EAAA,IAFIC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAiB,IAErB;EACI,IAAIG,KAAQ;EAEMT,cAAA,IAAAD,cAAA;EACLG,SAAA,IAAAC,SAAA;EAEb,MAAMO,CAAA,GAAIL,MAAO,CAAAK,CAAA;EACjB,MAAMC,CAAA,GAAIN,MAAO,CAAAM,CAAA;EACjB,MAAMC,CAAA,GAAIP,MAAO,CAAAO,CAAA;EACjB,MAAMC,CAAA,GAAIR,MAAO,CAAAQ,CAAA;EACjB,MAAMC,EAAA,GAAKT,MAAO,CAAAS,EAAA;EAClB,MAAMC,EAAA,GAAKV,MAAO,CAAAU,EAAA;EAElB,OAAON,KAAA,GAAQL,IACf;IACU,MAAAY,CAAA,GAAIlB,QAAA,CAASE,cAAc;IAC3B,MAAAiB,CAAA,GAAInB,QAAS,CAAAE,cAAA,GAAiB,CAAC;IAErCC,GAAA,CAAIC,SAAS,IAAKQ,CAAI,GAAAM,CAAA,GAAMJ,CAAA,GAAIK,CAAK,GAAAH,EAAA;IACrCb,GAAA,CAAIC,SAAA,GAAY,CAAC,IAAKS,CAAI,GAAAK,CAAA,GAAMH,CAAA,GAAII,CAAK,GAAAF,EAAA;IAE5Bb,SAAA,IAAAC,SAAA;IAEKH,cAAA,IAAAD,cAAA;IAElBU,KAAA;EAAA;AAER;AAEO,SAASS,cACZA,CAAAjB,GAAA,EACAC,SACA,EAAAC,SAAA,EACAC,IAEJ;EACI,IAAIK,KAAQ;EAECP,SAAA,IAAAC,SAAA;EAEb,OAAOM,KAAA,GAAQL,IACf;IACIH,GAAA,CAAIC,SAAS,CAAI;IACbD,GAAA,CAAAC,SAAA,GAAY,CAAC,CAAI;IAERA,SAAA,IAAAC,SAAA;IAEbM,KAAA;EAAA;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}