{"ast":null,"code":"import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL.mjs';\n\"use strict\";\nfunction generateArraySyncWGSL(uboElement, offsetToAdd) {\n  const {\n    size,\n    align\n  } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n  const remainder = (align - size) / 4;\n  return \"\\n         v = uv.\".concat(uboElement.data.name, \";\\n         \").concat(offsetToAdd !== 0 ? \"offset += \".concat(offsetToAdd, \";\") : \"\", \"\\n\\n         arrayOffset = offset;\\n\\n         t = 0;\\n\\n         for(var i=0; i < \").concat(uboElement.data.size * (size / 4), \"; i++)\\n         {\\n             for(var j = 0; j < \").concat(size / 4, \"; j++)\\n             {\\n                 data[arrayOffset++] = v[t++];\\n             }\\n             \").concat(remainder !== 0 ? \"arrayOffset += \".concat(remainder, \";\") : \"\", \"\\n         }\\n     \");\n}\nexport { generateArraySyncWGSL };","map":{"version":3,"names":["generateArraySyncWGSL","uboElement","offsetToAdd","size","align","WGSL_ALIGN_SIZE_DATA","data","type","remainder","concat","name"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/generateArraySyncWGSL.ts"],"sourcesContent":["import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the wgsl layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncWGSL(uboElement: UboElement, offsetToAdd: number): string\n{\n    // this is in byte..\n    const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n\n    const remainder = (align - size) / 4;\n\n    return `\n         v = uv.${uboElement.data.name};\n         ${offsetToAdd !== 0 ? `offset += ${offsetToAdd};` : ''}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${uboElement.data.size * (size / 4)}; i++)\n         {\n             for(var j = 0; j < ${size / 4}; j++)\n             {\n                 data[arrayOffset++] = v[t++];\n             }\n             ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n         }\n     `;\n}\n"],"mappings":";;AAWgB,SAAAA,sBAAsBC,UAAA,EAAwBC,WAC9D;EAEI,MAAM;IAAEC,IAAM;IAAAC;EAAA,IAAUC,oBAAqB,CAAAJ,UAAA,CAAWK,IAAA,CAAKC,IAAI;EAE3D,MAAAC,SAAA,IAAaJ,KAAA,GAAQD,IAAQ;EAE5B,4BAAAM,MAAA,CACOR,UAAA,CAAWK,IAAA,CAAKI,IAAI,kBAAAD,MAAA,CAC3BP,WAAgB,sBAAAO,MAAA,CAAiBP,WAAW,SAAM,EAAE,yFAAAO,MAAA,CAMnCR,UAAW,CAAAK,IAAA,CAAKH,IAAQ,IAAAA,IAAA,GAAO,CAAE,2DAAAM,MAAA,CAE3BN,IAAA,GAAO,CAAC,2GAAAM,MAAA,CAI3BD,SAAc,2BAAAC,MAAA,CAAsBD,SAAS,SAAM,EAAE;AAGpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}