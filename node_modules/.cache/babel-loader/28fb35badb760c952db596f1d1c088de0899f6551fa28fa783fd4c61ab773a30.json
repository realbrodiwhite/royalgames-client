{"ast":null,"code":"import { squaredDistanceToLineSegment } from '../misc/squaredDistanceToLineSegment.mjs';\nimport { Rectangle } from './Rectangle.mjs';\n\"use strict\";\nclass Polygon {\n  /**\n   * @param points - This can be an array of Points\n   *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n   *  the arguments passed can be all the points of the polygon e.g.\n   *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n   *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n   */\n  constructor() {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'polygon'\n     */\n    this.type = \"polygon\";\n    for (var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++) {\n      points[_key] = arguments[_key];\n    }\n    let flat = Array.isArray(points[0]) ? points[0] : points;\n    if (typeof flat[0] !== \"number\") {\n      const p = [];\n      for (let i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n      flat = p;\n    }\n    this.points = flat;\n    this.closePath = true;\n  }\n  /**\n   * Creates a clone of this polygon.\n   * @returns - A copy of the polygon.\n   */\n  clone() {\n    const points = this.points.slice();\n    const polygon = new Polygon(points);\n    polygon.closePath = this.closePath;\n    return polygon;\n  }\n  /**\n   * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this polygon.\n   */\n  contains(x, y) {\n    let inside = false;\n    const length = this.points.length / 2;\n    for (let i = 0, j = length - 1; i < length; j = i++) {\n      const xi = this.points[i * 2];\n      const yi = this.points[i * 2 + 1];\n      const xj = this.points[j * 2];\n      const yj = this.points[j * 2 + 1];\n      const intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this polygon including the stroke.\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @returns Whether the x/y coordinates are within this polygon\n   */\n  strokeContains(x, y, strokeWidth) {\n    const halfStrokeWidth = strokeWidth / 2;\n    const halfStrokeWidthSqrd = halfStrokeWidth * halfStrokeWidth;\n    const {\n      points\n    } = this;\n    const iterationLength = points.length - (this.closePath ? 0 : 2);\n    for (let i = 0; i < iterationLength; i += 2) {\n      const x1 = points[i];\n      const y1 = points[i + 1];\n      const x2 = points[(i + 2) % points.length];\n      const y2 = points[(i + 3) % points.length];\n      const distanceSqrd = squaredDistanceToLineSegment(x, y, x1, y1, x2, y2);\n      if (distanceSqrd <= halfStrokeWidthSqrd) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Returns the framing rectangle of the polygon as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out = out || new Rectangle();\n    const points = this.points;\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i];\n      const y = points[i + 1];\n      minX = x < minX ? x : minX;\n      maxX = x > maxX ? x : maxX;\n      minY = y < minY ? y : minY;\n      maxY = y > maxY ? y : maxY;\n    }\n    out.x = minX;\n    out.width = maxX - minX;\n    out.y = minY;\n    out.height = maxY - minY;\n    return out;\n  }\n  /**\n   * Copies another polygon to this one.\n   * @param polygon - The polygon to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(polygon) {\n    this.points = polygon.points.slice();\n    this.closePath = polygon.closePath;\n    return this;\n  }\n  /**\n   * Copies this polygon to another one.\n   * @param polygon - The polygon to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(polygon) {\n    polygon.copyFrom(this);\n    return polygon;\n  }\n  toString() {\n    return \"[pixi.js/math:PolygoncloseStroke=\".concat(this.closePath, \"points=\").concat(this.points.reduce((pointsDesc, currentPoint) => \"\".concat(pointsDesc, \", \").concat(currentPoint), \"\"), \"]\");\n  }\n  /**\n   * Get the last X coordinate of the polygon\n   * @readonly\n   */\n  get lastX() {\n    return this.points[this.points.length - 2];\n  }\n  /**\n   * Get the last Y coordinate of the polygon\n   * @readonly\n   */\n  get lastY() {\n    return this.points[this.points.length - 1];\n  }\n  /**\n   * Get the first X coordinate of the polygon\n   * @readonly\n   */\n  get x() {\n    return this.points[this.points.length - 2];\n  }\n  /**\n   * Get the first Y coordinate of the polygon\n   * @readonly\n   */\n  get y() {\n    return this.points[this.points.length - 1];\n  }\n}\nexport { Polygon };","map":{"version":3,"names":["Polygon","constructor","type","_len","arguments","length","points","Array","_key","flat","isArray","p","i","il","push","x","y","closePath","clone","slice","polygon","contains","inside","j","xi","yi","xj","yj","intersect","strokeContains","strokeWidth","halfStrokeWidth","halfStrokeWidthSqrd","iterationLength","x1","y1","x2","y2","distanceSqrd","squaredDistanceToLineSegment","getBounds","out","Rectangle","minX","Infinity","maxX","minY","maxY","n","width","height","copyFrom","copyTo","toString","concat","reduce","pointsDesc","currentPoint","lastX","lastY"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/maths/shapes/Polygon.ts"],"sourcesContent":["import { squaredDistanceToLineSegment } from '../misc/squaredDistanceToLineSegment';\nimport { Rectangle } from './Rectangle';\n\nimport type { SHAPE_PRIMITIVE } from '../misc/const';\nimport type { PointData } from '../point/PointData';\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * A class to define a shape via user defined coordinates.\n *\n *\n * `Polygon` can accept the following different constructor arguments:\n * - An array of `Point` objects\n * - An array of coordinate pairs\n *\n *\n * These can be passed as a single array, or as a sequence of arguments.\n * ```js\n * import { Polygon } from 'pixi.js';\n *\n * // create a polygon object from an array of points, or an array of coordinate pairs\n * const polygon1 = new Polygon([ new Point(0, 0), new Point(0, 100), new Point(100, 100) ]);\n * const polygon2 = new Polygon([ 0, 0, 0, 100, 100, 100 ]);\n *\n * // or create a polygon object from a sequence of points, or coordinate pairs\n * const polygon3 = new Polygon(new Point(0, 0), new Point(0, 100), new Point(100, 100));\n * const polygon4 = new Polygon(0, 0, 0, 100, 100, 100);\n * ```\n * @memberof maths\n */\nexport class Polygon implements ShapePrimitive\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closePath: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'polygon'\n     */\n    public readonly type: SHAPE_PRIMITIVE = 'polygon';\n\n    constructor(points: PointData[] | number[]);\n    constructor(...points: PointData[] | number[]);\n    /**\n     * @param points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new Polygon(new Point(), new Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: (PointData[] | number[])[] | PointData[] | number[])\n    {\n        let flat = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as PointData).x, (flat[i] as PointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n\n        this.closePath = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    public clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closePath = this.closePath;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    public contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this polygon including the stroke.\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param strokeWidth - The width of the line to check\n     * @returns Whether the x/y coordinates are within this polygon\n     */\n    public strokeContains(x: number, y: number, strokeWidth: number): boolean\n    {\n        const halfStrokeWidth = strokeWidth / 2;\n        const halfStrokeWidthSqrd = halfStrokeWidth * halfStrokeWidth;\n        const { points } = this;\n        const iterationLength = points.length - (this.closePath ? 0 : 2);\n\n        for (let i = 0; i < iterationLength; i += 2)\n        {\n            const x1 = points[i];\n            const y1 = points[i + 1];\n            const x2 = points[(i + 2) % points.length];\n            const y2 = points[(i + 3) % points.length];\n\n            const distanceSqrd = squaredDistanceToLineSegment(x, y, x1, y1, x2, y2);\n\n            if (distanceSqrd <= halfStrokeWidthSqrd)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns the framing rectangle of the polygon as a Rectangle object\n     * @param out - optional rectangle to store the result\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out = out || new Rectangle();\n\n        const points = this.points;\n\n        let minX = Infinity;\n        let maxX = -Infinity;\n\n        let minY = Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0, n = points.length; i < n; i += 2)\n        {\n            const x = points[i];\n            const y = points[i + 1];\n\n            minX = x < minX ? x : minX;\n            maxX = x > maxX ? x : maxX;\n\n            minY = y < minY ? y : minY;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        out.x = minX;\n        out.width = maxX - minX;\n\n        out.y = minY;\n        out.height = maxY - minY;\n\n        return out;\n    }\n\n    /**\n     * Copies another polygon to this one.\n     * @param polygon - The polygon to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(polygon: Polygon): this\n    {\n        this.points = polygon.points.slice();\n        this.closePath = polygon.closePath;\n\n        return this;\n    }\n\n    /**\n     * Copies this polygon to another one.\n     * @param polygon - The polygon to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(polygon: Polygon): Polygon\n    {\n        polygon.copyFrom(this);\n\n        return polygon;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Polygon`\n            + `closeStroke=${this.closePath}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n\n    /**\n     * Get the last X coordinate of the polygon\n     * @readonly\n     */\n    get lastX(): number\n    {\n        return this.points[this.points.length - 2];\n    }\n\n    /**\n     * Get the last Y coordinate of the polygon\n     * @readonly\n     */\n    get lastY(): number\n    {\n        return this.points[this.points.length - 1];\n    }\n\n    /**\n     * Get the first X coordinate of the polygon\n     * @readonly\n     */\n    get x(): number\n    {\n        return this.points[this.points.length - 2];\n    }\n    /**\n     * Get the first Y coordinate of the polygon\n     * @readonly\n     */\n    get y(): number\n    {\n        return this.points[this.points.length - 1];\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}