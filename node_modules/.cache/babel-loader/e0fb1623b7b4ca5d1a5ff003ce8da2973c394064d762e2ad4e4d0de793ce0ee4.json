{"ast":null,"code":"\"use strict\";\n\nvar ExtensionType = /* @__PURE__ */(ExtensionType2 => {\n  ExtensionType2[\"Application\"] = \"application\";\n  ExtensionType2[\"WebGLPipes\"] = \"webgl-pipes\";\n  ExtensionType2[\"WebGLPipesAdaptor\"] = \"webgl-pipes-adaptor\";\n  ExtensionType2[\"WebGLSystem\"] = \"webgl-system\";\n  ExtensionType2[\"WebGPUPipes\"] = \"webgpu-pipes\";\n  ExtensionType2[\"WebGPUPipesAdaptor\"] = \"webgpu-pipes-adaptor\";\n  ExtensionType2[\"WebGPUSystem\"] = \"webgpu-system\";\n  ExtensionType2[\"CanvasSystem\"] = \"canvas-system\";\n  ExtensionType2[\"CanvasPipesAdaptor\"] = \"canvas-pipes-adaptor\";\n  ExtensionType2[\"CanvasPipes\"] = \"canvas-pipes\";\n  ExtensionType2[\"Asset\"] = \"asset\";\n  ExtensionType2[\"LoadParser\"] = \"load-parser\";\n  ExtensionType2[\"ResolveParser\"] = \"resolve-parser\";\n  ExtensionType2[\"CacheParser\"] = \"cache-parser\";\n  ExtensionType2[\"DetectionParser\"] = \"detection-parser\";\n  ExtensionType2[\"MaskEffect\"] = \"mask-effect\";\n  ExtensionType2[\"BlendMode\"] = \"blend-mode\";\n  ExtensionType2[\"TextureSource\"] = \"texture-source\";\n  ExtensionType2[\"Environment\"] = \"environment\";\n  return ExtensionType2;\n})(ExtensionType || {});\nconst normalizeExtension = ext => {\n  if (typeof ext === \"function\" || typeof ext === \"object\" && ext.extension) {\n    if (!ext.extension) {\n      throw new Error(\"Extension class must have an extension object\");\n    }\n    const metadata = typeof ext.extension !== \"object\" ? {\n      type: ext.extension\n    } : ext.extension;\n    ext = {\n      ...metadata,\n      ref: ext\n    };\n  }\n  if (typeof ext === \"object\") {\n    ext = {\n      ...ext\n    };\n  } else {\n    throw new Error(\"Invalid extension type\");\n  }\n  if (typeof ext.type === \"string\") {\n    ext.type = [ext.type];\n  }\n  return ext;\n};\nconst normalizeExtensionPriority = (ext, defaultPriority) => {\n  var _normalizeExtension$p;\n  return (_normalizeExtension$p = normalizeExtension(ext).priority) !== null && _normalizeExtension$p !== void 0 ? _normalizeExtension$p : defaultPriority;\n};\nconst extensions = {\n  /** @ignore */\n  _addHandlers: {},\n  /** @ignore */\n  _removeHandlers: {},\n  /** @ignore */\n  _queue: {},\n  /**\n   * Remove extensions from PixiJS.\n   * @param extensions - Extensions to be removed.\n   * @returns {extensions} For chaining.\n   */\n  remove() {\n    for (var _len = arguments.length, extensions2 = new Array(_len), _key = 0; _key < _len; _key++) {\n      extensions2[_key] = arguments[_key];\n    }\n    extensions2.map(normalizeExtension).forEach(ext => {\n      ext.type.forEach(type => {\n        var _this$_removeHandlers, _this$_removeHandlers2;\n        return (_this$_removeHandlers = (_this$_removeHandlers2 = this._removeHandlers)[type]) === null || _this$_removeHandlers === void 0 ? void 0 : _this$_removeHandlers.call(_this$_removeHandlers2, ext);\n      });\n    });\n    return this;\n  },\n  /**\n   * Register new extensions with PixiJS.\n   * @param extensions - The spread of extensions to add to PixiJS.\n   * @returns {extensions} For chaining.\n   */\n  add() {\n    for (var _len2 = arguments.length, extensions2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      extensions2[_key2] = arguments[_key2];\n    }\n    extensions2.map(normalizeExtension).forEach(ext => {\n      ext.type.forEach(type => {\n        const handlers = this._addHandlers;\n        const queue = this._queue;\n        if (!handlers[type]) {\n          var _queue$type;\n          queue[type] = queue[type] || [];\n          (_queue$type = queue[type]) === null || _queue$type === void 0 ? void 0 : _queue$type.push(ext);\n        } else {\n          var _handlers$type;\n          (_handlers$type = handlers[type]) === null || _handlers$type === void 0 ? void 0 : _handlers$type.call(handlers, ext);\n        }\n      });\n    });\n    return this;\n  },\n  /**\n   * Internal method to handle extensions by name.\n   * @param type - The extension type.\n   * @param onAdd  - Function handler when extensions are added/registered {@link StrictExtensionFormat}.\n   * @param onRemove  - Function handler when extensions are removed/unregistered {@link StrictExtensionFormat}.\n   * @returns {extensions} For chaining.\n   */\n  handle(type, onAdd, onRemove) {\n    const addHandlers = this._addHandlers;\n    const removeHandlers = this._removeHandlers;\n    if (addHandlers[type] || removeHandlers[type]) {\n      throw new Error(\"Extension type \".concat(type, \" already has a handler\"));\n    }\n    addHandlers[type] = onAdd;\n    removeHandlers[type] = onRemove;\n    const queue = this._queue;\n    if (queue[type]) {\n      var _queue$type2;\n      (_queue$type2 = queue[type]) === null || _queue$type2 === void 0 ? void 0 : _queue$type2.forEach(ext => onAdd(ext));\n      delete queue[type];\n    }\n    return this;\n  },\n  /**\n   * Handle a type, but using a map by `name` property.\n   * @param type - Type of extension to handle.\n   * @param map - The object map of named extensions.\n   * @returns {extensions} For chaining.\n   */\n  handleByMap(type, map) {\n    return this.handle(type, extension => {\n      if (extension.name) {\n        map[extension.name] = extension.ref;\n      }\n    }, extension => {\n      if (extension.name) {\n        delete map[extension.name];\n      }\n    });\n  },\n  /**\n   * Handle a type, but using a list of extensions with a `name` property.\n   * @param type - Type of extension to handle.\n   * @param map - The array of named extensions.\n   * @param defaultPriority - Fallback priority if none is defined.\n   * @returns {extensions} For chaining.\n   */\n  handleByNamedList(type, map) {\n    let defaultPriority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    return this.handle(type, extension => {\n      const index = map.findIndex(item => item.name === extension.name);\n      if (index >= 0) return;\n      map.push({\n        name: extension.name,\n        value: extension.ref\n      });\n      map.sort((a, b) => normalizeExtensionPriority(b.value, defaultPriority) - normalizeExtensionPriority(a.value, defaultPriority));\n    }, extension => {\n      const index = map.findIndex(item => item.name === extension.name);\n      if (index !== -1) {\n        map.splice(index, 1);\n      }\n    });\n  },\n  /**\n   * Handle a type, but using a list of extensions.\n   * @param type - Type of extension to handle.\n   * @param list - The list of extensions.\n   * @param defaultPriority - The default priority to use if none is specified.\n   * @returns {extensions} For chaining.\n   */\n  handleByList(type, list) {\n    let defaultPriority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    return this.handle(type, extension => {\n      if (list.includes(extension.ref)) {\n        return;\n      }\n      list.push(extension.ref);\n      list.sort((a, b) => normalizeExtensionPriority(b, defaultPriority) - normalizeExtensionPriority(a, defaultPriority));\n    }, extension => {\n      const index = list.indexOf(extension.ref);\n      if (index !== -1) {\n        list.splice(index, 1);\n      }\n    });\n  }\n};\nexport { ExtensionType, extensions, normalizeExtensionPriority };","map":{"version":3,"names":["ExtensionType","ExtensionType2","normalizeExtension","ext","extension","Error","metadata","type","ref","normalizeExtensionPriority","defaultPriority","_normalizeExtension$p","priority","extensions","_addHandlers","_removeHandlers","_queue","remove","_len","arguments","length","extensions2","Array","_key","map","forEach","_this$_removeHandlers","_this$_removeHandlers2","call","add","_len2","_key2","handlers","queue","_queue$type","push","_handlers$type","handle","onAdd","onRemove","addHandlers","removeHandlers","concat","_queue$type2","handleByMap","name","handleByNamedList","undefined","index","findIndex","item","value","sort","a","b","splice","handleByList","list","includes","indexOf"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/extensions/Extensions.ts"],"sourcesContent":["/**\n * `extensions` is a global object that holds all the extensions registered with PixiJS.\n * PixiJS uses a this extensions architecture a lot to make the library more modular and\n * flexible.\n *\n * For example, if you want to add load a new type of asset, you can register a new\n * {@link assets.LoaderParser} with the `extensions` object.\n *\n * ```js\n * import { extensions, ExtensionType } from 'pixi.js';\n *\n * // create a custom asset loader\n * const customAssetLoader = {\n *    extension: {\n *        type: ExtensionType.LoadParser,\n *        name: 'custom-asset-loader',\n *    },\n *    test(url) {\n *       // check if this new loader should be used...\n *    },\n *    load(url) {\n *        // load the asset...\n *    },\n * };\n *\n * // add the custom asset loader to pixi\n * extensions.add(customAssetLoader);\n * ```\n *\n * This would add the `customAssetLoader` to the list of available loaders that PixiJS can use.\n *\n * There are many different types of extensions, which are listed in {@link extensions.ExtensionType}.\n * @namespace extensions\n */\n\n/**\n * Collection of valid extension types.\n * @memberof extensions\n */\nenum ExtensionType\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /** extensions that are registered as Application plugins */\n    Application = 'application',\n\n    /** extensions that are registered as WebGL render pipes */\n    WebGLPipes = 'webgl-pipes',\n    /** extensions that are registered as WebGL render pipes adaptors */\n    WebGLPipesAdaptor = 'webgl-pipes-adaptor',\n    /** extensions that are registered as WebGL render systems */\n    WebGLSystem = 'webgl-system',\n\n    /** extensions that are registered as WebGPU render pipes */\n    WebGPUPipes = 'webgpu-pipes',\n    /** extensions that are registered as WebGPU render pipes adaptors */\n    WebGPUPipesAdaptor = 'webgpu-pipes-adaptor',\n    /** extensions that are registered as WebGPU render systems */\n    WebGPUSystem = 'webgpu-system',\n\n    /** extensions that are registered as Canvas render pipes */\n    CanvasSystem = 'canvas-system',\n    /** extensions that are registered as Canvas render pipes adaptors */\n    CanvasPipesAdaptor = 'canvas-pipes-adaptor',\n    /** extensions that are registered as Canvas render systems */\n    CanvasPipes = 'canvas-pipes',\n\n    /** extensions that combine the other Asset extensions */\n    Asset = 'asset',\n    /** extensions that are used to load assets through Assets */\n    LoadParser = 'load-parser',\n    /** extensions that are used to resolve asset urls through Assets */\n    ResolveParser = 'resolve-parser',\n    /** extensions that are used to handle how urls are cached by Assets */\n    CacheParser = 'cache-parser',\n    /** extensions that are used to add/remove available resources from Assets */\n    DetectionParser = 'detection-parser',\n\n    /** extensions that are registered with the MaskEffectManager */\n    MaskEffect = 'mask-effect',\n\n    /** A type of extension for creating a new advanced blend mode */\n    BlendMode = 'blend-mode',\n\n    /** A type of extension that will be used to auto detect a resource type */\n    TextureSource = 'texture-source',\n\n    /** A type of extension that will be used to auto detect an environment */\n    Environment = 'environment',\n}\n\n/**\n * The metadata for an extension.\n * @memberof extensions\n * @ignore\n */\ninterface ExtensionMetadataDetails\n{\n    /** The extension type, can be multiple types */\n    type: ExtensionType | ExtensionType[];\n    /** Optional. Some plugins provide an API name/property, to make them more easily accessible */\n    name?: string;\n    /** Optional, used for sorting the plugins in a particular order */\n    priority?: number;\n}\n\n/**\n * The metadata for an extension.\n * @memberof extensions\n */\ntype ExtensionMetadata = ExtensionType | ExtensionMetadataDetails;\n\n/**\n * Format when registering an extension. Generally, the extension\n * should have these values as `extension` static property,\n * but you can override name or type by providing an object.\n * @memberof extensions\n */\ninterface ExtensionFormat\n{\n    /** The extension type, can be multiple types */\n    type: ExtensionType | ExtensionType[];\n    /** Optional. Some plugins provide an API name/property, such as Renderer plugins */\n    name?: string;\n    /** Optional, used for sorting the plugins in a particular order */\n    priority?: number;\n    /** Reference to the plugin object/class */\n    ref: any;\n}\n\n/**\n * Extension format that is used internally for registrations.\n * @memberof extensions\n * @ignore\n */\ninterface StrictExtensionFormat extends ExtensionFormat\n{\n    /** The extension type, always expressed as multiple, even if a single */\n    type: ExtensionType[];\n}\n\ntype ExtensionHandler = (extension: StrictExtensionFormat) => void;\n\n/**\n * Convert input into extension format data.\n * @ignore\n */\nconst normalizeExtension = (ext: ExtensionFormat | any): StrictExtensionFormat =>\n{\n    // Class/Object submission, use extension object\n    if (typeof ext === 'function' || (typeof ext === 'object' && ext.extension))\n    {\n        // #if _DEBUG\n        if (!ext.extension)\n        {\n            throw new Error('Extension class must have an extension object');\n        }\n        // #endif\n        const metadata: ExtensionMetadataDetails = (typeof ext.extension !== 'object')\n            ? { type: ext.extension }\n            : ext.extension;\n\n        ext = { ...metadata, ref: ext };\n    }\n    if (typeof ext === 'object')\n    {\n        ext = { ...ext };\n    }\n    else\n    {\n        throw new Error('Invalid extension type');\n    }\n\n    if (typeof ext.type === 'string')\n    {\n        ext.type = [ext.type];\n    }\n\n    return ext;\n};\n\n/**\n * Get the priority for an extension.\n * @ignore\n * @param ext - Any extension\n * @param defaultPriority - Fallback priority if none is defined.\n * @returns The priority for the extension.\n * @memberof extensions\n */\nexport const normalizeExtensionPriority = (ext: ExtensionFormat | any, defaultPriority: number): number =>\n    normalizeExtension(ext).priority ?? defaultPriority;\n\n/**\n * Global registration of all PixiJS extensions. One-stop-shop for extensibility.\n *\n * Import the `extensions` object and use it to register new functionality via the described methods below.\n * ```js\n * import { extensions } from 'pixi.js';\n *\n * // register a new extension\n * extensions.add(myExtension);\n * ```\n * @property {Function} remove - Remove extensions from PixiJS.\n * @property {Function} add - Register new extensions with PixiJS.\n * @property {Function} handle - Internal method to handle extensions by name.\n * @property {Function} handleByMap - Handle a type, but using a map by `name` property.\n * @property {Function} handleByNamedList - Handle a type, but using a list of extensions with a `name` property.\n * @property {Function} handleByList - Handle a type, but using a list of extensions.\n * @memberof extensions\n */\nconst extensions = {\n\n    /** @ignore */\n    _addHandlers: {} as Partial<Record<ExtensionType, ExtensionHandler>>,\n\n    /** @ignore */\n    _removeHandlers: {} as Partial<Record<ExtensionType, ExtensionHandler>>,\n\n    /** @ignore */\n    _queue: {} as Partial<Record<ExtensionType, StrictExtensionFormat[]>>,\n\n    /**\n     * Remove extensions from PixiJS.\n     * @param extensions - Extensions to be removed.\n     * @returns {extensions} For chaining.\n     */\n    remove(...extensions: Array<ExtensionFormat | any>)\n    {\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n        });\n\n        return this;\n    },\n\n    /**\n     * Register new extensions with PixiJS.\n     * @param extensions - The spread of extensions to add to PixiJS.\n     * @returns {extensions} For chaining.\n     */\n    add(...extensions: Array<ExtensionFormat | any>)\n    {\n        // Handle any extensions either passed as class w/ data or as data\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) =>\n            {\n                const handlers = this._addHandlers;\n                const queue = this._queue;\n\n                if (!handlers[type])\n                {\n                    queue[type] = queue[type] || [];\n                    queue[type]?.push(ext);\n                }\n                else\n                {\n                    handlers[type]?.(ext);\n                }\n            });\n        });\n\n        return this;\n    },\n\n    /**\n     * Internal method to handle extensions by name.\n     * @param type - The extension type.\n     * @param onAdd  - Function handler when extensions are added/registered {@link StrictExtensionFormat}.\n     * @param onRemove  - Function handler when extensions are removed/unregistered {@link StrictExtensionFormat}.\n     * @returns {extensions} For chaining.\n     */\n    handle(type: ExtensionType, onAdd: ExtensionHandler, onRemove: ExtensionHandler)\n    {\n        const addHandlers = this._addHandlers;\n        const removeHandlers = this._removeHandlers;\n\n        // #if _DEBUG\n        if (addHandlers[type] || removeHandlers[type])\n        {\n            throw new Error(`Extension type ${type} already has a handler`);\n        }\n        // #endif\n\n        addHandlers[type] = onAdd;\n        removeHandlers[type] = onRemove;\n\n        // Process the queue\n        const queue = this._queue;\n\n        // Process any plugins that have been registered before the handler\n        if (queue[type])\n        {\n            queue[type]?.forEach((ext) => onAdd(ext));\n            delete queue[type];\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle a type, but using a map by `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The object map of named extensions.\n     * @returns {extensions} For chaining.\n     */\n    handleByMap(type: ExtensionType, map: Record<string, any>)\n    {\n        return this.handle(type,\n            (extension) =>\n            {\n                if (extension.name)\n                {\n                    map[extension.name] = extension.ref;\n                }\n            },\n            (extension) =>\n            {\n                if (extension.name)\n                {\n                    delete map[extension.name];\n                }\n            }\n        );\n    },\n\n    /**\n     * Handle a type, but using a list of extensions with a `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The array of named extensions.\n     * @param defaultPriority - Fallback priority if none is defined.\n     * @returns {extensions} For chaining.\n     */\n    handleByNamedList(type: ExtensionType, map: {name: string, value: any}[], defaultPriority = -1)\n    {\n        return this.handle(\n            type,\n            (extension) =>\n            {\n                const index = map.findIndex((item) => item.name === extension.name);\n\n                if (index >= 0) return;\n\n                map.push({ name: extension.name, value: extension.ref });\n                map.sort((a, b) =>\n                    normalizeExtensionPriority(b.value, defaultPriority)\n                    - normalizeExtensionPriority(a.value, defaultPriority));\n            },\n            (extension) =>\n            {\n                const index = map.findIndex((item) => item.name === extension.name);\n\n                if (index !== -1)\n                {\n                    map.splice(index, 1);\n                }\n            }\n        );\n    },\n\n    /**\n     * Handle a type, but using a list of extensions.\n     * @param type - Type of extension to handle.\n     * @param list - The list of extensions.\n     * @param defaultPriority - The default priority to use if none is specified.\n     * @returns {extensions} For chaining.\n     */\n    handleByList(type: ExtensionType, list: any[], defaultPriority = -1)\n    {\n        return this.handle(\n            type,\n            (extension) =>\n            {\n                if (list.includes(extension.ref))\n                {\n                    return;\n                }\n\n                list.push(extension.ref);\n                list.sort((a, b) =>\n                    normalizeExtensionPriority(b, defaultPriority) - normalizeExtensionPriority(a, defaultPriority));\n            },\n            (extension) =>\n            {\n                const index = list.indexOf(extension.ref);\n\n                if (index !== -1)\n                {\n                    list.splice(index, 1);\n                }\n            }\n        );\n    },\n};\n\nexport {\n    extensions,\n    ExtensionType,\n};\nexport type {\n    StrictExtensionFormat as ExtensionFormat,\n    ExtensionFormat as ExtensionFormatLoose,\n    ExtensionHandler,\n    ExtensionMetadata,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}