{"ast":null,"code":"import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options) {\n    let defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param options - The options for creating the image, or the target to extract\n   * @returns - HTML Image of the target\n   */\n  async image(options) {\n    const image = new Image();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   * `Extract.canvas` and then running toDataURL on that.\n   * @param options - The options for creating the image, or the target to extract\n   */\n  async base64(options) {\n    options = this._normalizeOptions(options, _ExtractSystem.defaultImageOptions);\n    const {\n      format,\n      quality\n    } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob(blob => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({\n        type: imageTypes[format],\n        quality\n      });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy();\n    return canvas;\n  }\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy();\n    }\n    return pixelInfo;\n  }\n  /**\n   * Will return a texture of the target\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns - A texture of the target\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture) return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Will extract a HTMLImage of the target and download it\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   */\n  download(options) {\n    var _options$filename;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = (_options$filename = options.filename) !== null && _options$filename !== void 0 ? _options$filename : \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * @param options - The options for logging the image, or the target to log\n   */\n  log(options) {\n    var _options$width;\n    const width = (_options$width = options.width) !== null && _options$width !== void 0 ? _options$width : 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(\"[Pixi Texture] \".concat(canvas.width, \"px \").concat(canvas.height, \"px\"));\n    const style = [\"font-size: 1px;\", \"padding: \".concat(width, \"px \", 300, \"px;\"), \"background: url(\".concat(base64, \") no-repeat;\"), \"background-size: contain;\"].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [ExtensionType.WebGLSystem, ExtensionType.WebGPUSystem],\n  name: \"extract\"\n};\n/** Default options for creating an image. */\n_ExtractSystem.defaultImageOptions = {\n  /** The format of the image. */\n  format: \"png\",\n  /** The quality of the image. */\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\nexport { ExtractSystem };","map":{"version":3,"names":["imageTypes","png","jpg","webp","_ExtractSystem","constructor","renderer","_renderer","_normalizeOptions","options","defaults","arguments","length","undefined","Container","Texture","target","image","Image","src","base64","defaultImageOptions","format","quality","canvas","toBlob","Promise","resolve","reject","blob","Error","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","type","texture","generateCanvas","textureGenerator","generateTexture","destroy","pixels","pixelInfo","getPixels","download","_options$filename","link","document","createElement","filename","href","body","appendChild","click","removeChild","log","_options$width","width","console","concat","height","style","join","extension","ExtensionType","WebGLSystem","WebGPUSystem","name","ExtractSystem"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/rendering/renderers/shared/extract/ExtractSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Container } from '../../../../scene/container/Container';\nimport { Texture } from '../texture/Texture';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { GetPixelsOutput } from '../texture/GenerateCanvas';\nimport type { GenerateTextureOptions } from './GenerateTextureSystem';\n\nconst imageTypes = {\n    png: 'image/png',\n    jpg: 'image/jpeg',\n    webp: 'image/webp',\n};\n\ntype Formats = keyof typeof imageTypes;\n\n/**\n * Options for creating an image from a renderer.\n * @memberof rendering\n */\nexport interface ImageOptions\n{\n    /** The format of the image. */\n    format?: Formats;\n    /** The quality of the image. */\n    quality?: number;\n}\n\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport interface BaseExtractOptions\n{\n    /** The target to extract. */\n    target: Container | Texture;\n    /** The region of the target to extract. */\n    frame?: Rectangle;\n    /** The resolution of the extracted content. */\n    resolution?: number;\n    /** The color used to clear the extracted content. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n}\n/**\n * Options for extracting an HTMLImage from the renderer.\n * @memberof rendering\n */\nexport type ExtractImageOptions = BaseExtractOptions & ImageOptions;\n/**\n * Options for extracting and downloading content from a renderer.\n * @memberof rendering\n */\nexport type ExtractDownloadOptions = BaseExtractOptions & {\n    /** The filename to use when downloading the content. */\n    filename: string;\n};\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport type ExtractOptions = BaseExtractOptions | ExtractImageOptions | ExtractDownloadOptions;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n * await app.init();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .circle(0, 0, 50);\n *     .fill(0xFF0000)\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof rendering\n */\nexport class ExtractSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'extract',\n    } as const;\n\n    /** Default options for creating an image. */\n    public static defaultImageOptions: ImageOptions = {\n        /** The format of the image. */\n        format: 'png' as Formats,\n        /** The quality of the image. */\n        quality: 1,\n    };\n\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    private _normalizeOptions<T extends ExtractOptions>(\n        options: ExtractImageOptions | Container | Texture,\n        defaults: Partial<T> = {},\n    ): T\n    {\n        if (options instanceof Container || options instanceof Texture)\n        {\n            return {\n                target: options,\n                ...defaults\n            } as T;\n        }\n\n        return {\n            ...defaults,\n            ...options,\n        } as T;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param options - The options for creating the image, or the target to extract\n     * @returns - HTML Image of the target\n     */\n    public async image(options: ExtractImageOptions | Container | Texture): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(options);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     * `Extract.canvas` and then running toDataURL on that.\n     * @param options - The options for creating the image, or the target to extract\n     */\n    public async base64(options: ExtractImageOptions | Container | Texture): Promise<string>\n    {\n        options = this._normalizeOptions<ExtractImageOptions>(\n            options,\n            ExtractSystem.defaultImageOptions\n        );\n\n        const { format, quality } = options;\n\n        const canvas = this.canvas(options);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, imageTypes[format], quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(imageTypes[format], quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param options - The options for creating the canvas, or the target to extract\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(options: ExtractOptions | Container | Texture): ICanvas\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n\n        if (target instanceof Texture)\n        {\n            return renderer.texture.generateCanvas(target);\n        }\n\n        const texture = renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const canvas = renderer.texture.generateCanvas(texture);\n\n        texture.destroy();\n\n        return canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param options - The options for extracting the image, or the target to extract\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(options: ExtractOptions | Container | Texture): GetPixelsOutput\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n        const texture = target instanceof Texture\n            ? target\n            : renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const pixelInfo = renderer.texture.getPixels(texture);\n\n        if (target instanceof Container)\n        {\n            // destroy generated texture\n            texture.destroy();\n        }\n\n        return pixelInfo;\n    }\n\n    /**\n     * Will return a texture of the target\n     * @param options - The options for creating the texture, or the target to extract\n     * @returns - A texture of the target\n     */\n    public texture(options: ExtractOptions | Container | Texture): Texture\n    {\n        options = this._normalizeOptions(options);\n\n        if (options.target instanceof Texture) return options.target;\n\n        return this._renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n    }\n\n    /**\n     * Will extract a HTMLImage of the target and download it\n     * @param options - The options for downloading and extracting the image, or the target to extract\n     */\n    public download(options: ExtractDownloadOptions | Container | Texture)\n    {\n        options = this._normalizeOptions<ExtractDownloadOptions>(options);\n\n        const canvas = this.canvas(options);\n\n        const link = document.createElement('a');\n\n        link.download = options.filename ?? 'image.png';\n        link.href = canvas.toDataURL('image/png');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    /**\n     * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n     * @param options - The options for logging the image, or the target to log\n     */\n    public log(options: (ExtractOptions & {width?: number}) | Container | Texture)\n    {\n        const width = options.width ?? 200;\n\n        options = this._normalizeOptions(options);\n\n        const canvas = this.canvas(options);\n\n        const base64 = canvas.toDataURL();\n\n        // eslint-disable-next-line no-console\n        console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n\n        const style = [\n            'font-size: 1px;',\n            `padding: ${width}px ${300}px;`,\n            `background: url(${base64}) no-repeat;`,\n            'background-size: contain;',\n        ].join(' ');\n\n        // eslint-disable-next-line no-console\n        console.log('%c ', style);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}