{"ast":null,"code":"\"use strict\";\n\nconst findHooksRx = /\\{\\{(.*?)\\}\\}/g;\nfunction compileHooks(programSrc) {\n  var _programSrc$match$map, _programSrc$match;\n  const parts = {};\n  const partMatches = (_programSrc$match$map = (_programSrc$match = programSrc.match(findHooksRx)) === null || _programSrc$match === void 0 ? void 0 : _programSrc$match.map(hook => hook.replace(/[{()}]/g, \"\"))) !== null && _programSrc$match$map !== void 0 ? _programSrc$match$map : [];\n  partMatches.forEach(hook => {\n    parts[hook] = [];\n  });\n  return parts;\n}\nexport { compileHooks, findHooksRx };","map":{"version":3,"names":["findHooksRx","compileHooks","programSrc","_programSrc$match$map","_programSrc$match","parts","partMatches","match","map","hook","replace","forEach"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/compileHooks.ts"],"sourcesContent":["export const findHooksRx = /\\{\\{(.*?)\\}\\}/g;\n\n/**\n * takes a program string and returns an hash mapping the hooks to empty arrays\n * @param programSrc - the program containing hooks\n */\nexport function compileHooks(programSrc: string): Record<string, string[]>\n{\n    const parts: Record<string, string[]> = {};\n\n    const partMatches = programSrc\n        .match(findHooksRx)\n        ?.map((hook) => hook.replace(/[{()}]/g, '')) ?? [];\n\n    partMatches.forEach((hook) =>\n    {\n        parts[hook] = [];\n    });\n\n    return parts;\n}\n"],"mappings":";;AAAO,MAAMA,WAAc;AAMpB,SAASC,aAAaC,UAC7B;EAAA,IAAAC,qBAAA,EAAAC,iBAAA;EACI,MAAMC,KAAA,GAAkC,EAAC;EAEzC,MAAMC,WAAc,IAAAH,qBAAA,IAAAC,iBAAA,GAAAF,UAAA,CACfK,KAAM,CAAAP,WAAW,eAAAI,iBAAA,uBADFA,iBAAA,CAEdI,GAAI,CAACC,IAAS,IAAAA,IAAA,CAAKC,OAAQ,YAAW,EAAE,CAAC,eAAAP,qBAAA,cAAAA,qBAAA,GAAK,EAAC;EAEzCG,WAAA,CAAAK,OAAA,CAASF,IACrB;IACUJ,KAAA,CAAAI,IAAI,IAAI,EAAC;EAAA,CAClB;EAEM,OAAAJ,KAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}