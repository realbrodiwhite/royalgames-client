{"ast":null,"code":"import { GlProgram } from '../renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../renderers/gpu/shader/GpuProgram.mjs';\nimport { compileHighShader, compileHighShaderGl } from './compiler/compileHighShader.mjs';\nimport { fragmentGPUTemplate, vertexGPUTemplate, vertexGlTemplate, fragmentGlTemplate } from './defaultProgramTemplate.mjs';\nimport { globalUniformsBit, globalUniformsBitGl } from './shader-bits/globalUniformsBit.mjs';\n\"use strict\";\nfunction compileHighShaderGpuProgram(_ref) {\n  let {\n    bits,\n    name\n  } = _ref;\n  const source = compileHighShader({\n    template: {\n      fragment: fragmentGPUTemplate,\n      vertex: vertexGPUTemplate\n    },\n    bits: [globalUniformsBit, ...bits]\n  });\n  return GpuProgram.from({\n    name,\n    vertex: {\n      source: source.vertex,\n      entryPoint: \"main\"\n    },\n    fragment: {\n      source: source.fragment,\n      entryPoint: \"main\"\n    }\n  });\n}\nfunction compileHighShaderGlProgram(_ref2) {\n  let {\n    bits,\n    name\n  } = _ref2;\n  return new GlProgram({\n    name,\n    ...compileHighShaderGl({\n      template: {\n        vertex: vertexGlTemplate,\n        fragment: fragmentGlTemplate\n      },\n      bits: [globalUniformsBitGl, ...bits]\n    })\n  });\n}\nexport { compileHighShaderGlProgram, compileHighShaderGpuProgram };","map":{"version":3,"names":["compileHighShaderGpuProgram","_ref","bits","name","source","compileHighShader","template","fragment","fragmentGPUTemplate","vertex","vertexGPUTemplate","globalUniformsBit","GpuProgram","from","entryPoint","compileHighShaderGlProgram","_ref2","GlProgram","compileHighShaderGl","vertexGlTemplate","fragmentGlTemplate","globalUniformsBitGl"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/rendering/high-shader/compileHighShaderToProgram.ts"],"sourcesContent":["import { GlProgram } from '../renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../renderers/gpu/shader/GpuProgram';\nimport { compileHighShader, compileHighShaderGl } from './compiler/compileHighShader';\nimport { fragmentGlTemplate, fragmentGPUTemplate, vertexGlTemplate, vertexGPUTemplate } from './defaultProgramTemplate';\nimport { globalUniformsBit, globalUniformsBitGl } from './shader-bits/globalUniformsBit';\n\nimport type { HighShaderBit } from './compiler/types';\n\nexport function compileHighShaderGpuProgram({ bits, name }: {bits: HighShaderBit[], name: string}): GpuProgram\n{\n    const source = compileHighShader({\n        template: {\n            fragment: fragmentGPUTemplate,\n            vertex: vertexGPUTemplate,\n        },\n        bits: [\n            globalUniformsBit,\n            ...bits,\n        ]\n    });\n\n    return GpuProgram.from({\n        name,\n        vertex: {\n            source: source.vertex,\n            entryPoint: 'main',\n        },\n        fragment: {\n            source: source.fragment,\n            entryPoint: 'main',\n        },\n    });\n}\n\nexport function compileHighShaderGlProgram({ bits, name }: {bits: HighShaderBit[], name: string}): GlProgram\n{\n    return new GlProgram({\n        name,\n        ...compileHighShaderGl({\n            template: {\n                vertex: vertexGlTemplate,\n                fragment: fragmentGlTemplate,\n            },\n            bits: [\n                globalUniformsBitGl,\n                ...bits,\n            ]\n        })\n    });\n}\n"],"mappings":";;;;;;AAQO,SAASA,2BAA4BA,CAAAC,IAAA,EAC5C;EAAA,IAD4C;IAAEC,IAAM;IAAAC;EAAA,CACpD,GAAAF,IAAA;EACI,MAAMG,MAAA,GAASC,iBAAkB;IAC7BC,QAAU;MACNC,QAAU,EAAAC,mBAAA;MACVC,MAAQ,EAAAC;IAAA,CACZ;IACAR,IAAM,GACFS,iBAAA,EACA,GAAGT,IAAA;EACP,CACH;EAED,OAAOU,UAAA,CAAWC,IAAK;IACnBV,IAAA;IACAM,MAAQ;MACJL,MAAA,EAAQA,MAAO,CAAAK,MAAA;MACfK,UAAY;IAAA,CAChB;IACAP,QAAU;MACNH,MAAA,EAAQA,MAAO,CAAAG,QAAA;MACfO,UAAY;IAAA;EAChB,CACH;AACL;AAEO,SAASC,0BAA2BA,CAAAC,KAAA,EAC3C;EAAA,IAD2C;IAAEd,IAAM;IAAAC;EAAA,CACnD,GAAAa,KAAA;EACI,OAAO,IAAIC,SAAU;IACjBd,IAAA;IACA,GAAGe,mBAAoB;MACnBZ,QAAU;QACNG,MAAQ,EAAAU,gBAAA;QACRZ,QAAU,EAAAa;MAAA,CACd;MACAlB,IAAM,GACFmB,mBAAA,EACA,GAAGnB,IAAA;IACP,CACH;EAAA,CACJ;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}