{"ast":null,"code":"import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    options = {\n      ..._NineSliceGeometry.defaultOptions,\n      ...options\n    };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    var _options$width, _options$height, _options$originalWidt, _options$originalHeig, _options$leftWidth, _options$rightWidth, _options$topHeight, _options$bottomHeight;\n    this.width = (_options$width = options.width) !== null && _options$width !== void 0 ? _options$width : this.width;\n    this.height = (_options$height = options.height) !== null && _options$height !== void 0 ? _options$height : this.height;\n    this._originalWidth = (_options$originalWidt = options.originalWidth) !== null && _options$originalWidt !== void 0 ? _options$originalWidt : this._originalWidth;\n    this._originalHeight = (_options$originalHeig = options.originalHeight) !== null && _options$originalHeig !== void 0 ? _options$originalHeig : this._originalHeight;\n    this._leftWidth = (_options$leftWidth = options.leftWidth) !== null && _options$leftWidth !== void 0 ? _options$leftWidth : this._leftWidth;\n    this._rightWidth = (_options$rightWidth = options.rightWidth) !== null && _options$rightWidth !== void 0 ? _options$rightWidth : this._rightWidth;\n    this._topHeight = (_options$topHeight = options.topHeight) !== null && _options$topHeight !== void 0 ? _options$topHeight : this._topHeight;\n    this._bottomHeight = (_options$bottomHeight = options.bottomHeight) !== null && _options$bottomHeight !== void 0 ? _options$bottomHeight : this._bottomHeight;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const positions = this.positions;\n    const w = this._leftWidth + this._rightWidth;\n    const scaleW = this.width > w ? 1 : this.width / w;\n    const h = this._topHeight + this._bottomHeight;\n    const scaleH = this.height > h ? 1 : this.height / h;\n    const scale = Math.min(scaleW, scaleH);\n    positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n    positions[17] = positions[19] = positions[21] = positions[23] = this.height - this._bottomHeight * scale;\n    positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n    positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n    positions[4] = positions[12] = positions[20] = positions[28] = this.width - this._rightWidth * scale;\n    positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\nexport { NineSliceGeometry };","map":{"version":3,"names":["_NineSliceGeometry","PlaneGeometry","constructor","options","arguments","length","undefined","defaultOptions","width","height","verticesX","verticesY","update","_options$width","_options$height","_options$originalWidt","_options$originalHeig","_options$leftWidth","_options$rightWidth","_options$topHeight","_options$bottomHeight","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","updateUvs","updatePositions","positions","w","scaleW","h","scaleH","scale","Math","min","getBuffer","uvs","_uvw","_uvh","NineSliceGeometry"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts"],"sourcesContent":["import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const positions = this.positions;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this.width > w ? 1.0 : this.width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this.height > h ? 1.0 : this.height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n        positions[17] = positions[19] = positions[21] = positions[23] = this.height - (this._bottomHeight * scale);\n        positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n\n        positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n        positions[4] = positions[12] = positions[20] = positions[28] = this.width - (this._rightWidth * scale);\n        positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}