{"ast":null,"code":"import { Color } from '../../../color/Color.mjs';\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\"color: \".concat(Color.shared.setValue(fill.color).toHex()), \"font-size: \".concat(style.fontSize, \"px\"), \"font-family: \".concat(style.fontFamily), \"font-weight: \".concat(style.fontWeight), \"font-style: \".concat(style.fontStyle), \"font-variant: \".concat(style.fontVariant), \"letter-spacing: \".concat(style.letterSpacing, \"px\"), \"text-align: \".concat(style.align), \"padding: \".concat(style.padding, \"px\"), \"white-space: \".concat(style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace), ...(style.lineHeight ? [\"line-height: \".concat(style.lineHeight, \"px\")] : []), ...(style.wordWrap ? [\"word-wrap: \".concat(style.breakWords ? \"break-all\" : \"break-word\"), \"max-width: \".concat(style.wordWrapWidth, \"px\")] : []), ...(stroke ? [strokeToCSS(stroke)] : []), ...(style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : []), ...style.cssOverrides].join(\";\");\n  const cssStyles = [\"div { \".concat(cssStyleString, \" }\")];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = \"\".concat(x, \"px \").concat(y, \"px\");\n  if (dropShadowStyle.blur > 0) {\n    return \"text-shadow: \".concat(position, \" \").concat(dropShadowStyle.blur, \"px \").concat(color);\n  }\n  return \"text-shadow: \".concat(position, \" \").concat(color);\n}\nfunction strokeToCSS(stroke) {\n  return [\"-webkit-text-stroke-width: \".concat(stroke.width, \"px\"), \"-webkit-text-stroke-color: \".concat(Color.shared.setValue(stroke.color).toHex()), \"text-stroke-width: \".concat(stroke.width, \"px\"), \"text-stroke-color: \".concat(Color.shared.setValue(stroke.color).toHex()), \"paint-order: stroke\"].join(\";\");\n}\nconst templates = {\n  fontSize: \"font-size: {{VALUE}}px\",\n  fontFamily: \"font-family: {{VALUE}}\",\n  fontWeight: \"font-weight: {{VALUE}}\",\n  fontStyle: \"font-style: {{VALUE}}\",\n  fontVariant: \"font-variant: {{VALUE}}\",\n  letterSpacing: \"letter-spacing: {{VALUE}}px\",\n  align: \"text-align: {{VALUE}}\",\n  padding: \"padding: {{VALUE}}px\",\n  whiteSpace: \"white-space: {{VALUE}}\",\n  lineHeight: \"line-height: {{VALUE}}px\",\n  wordWrapWidth: \"max-width: {{VALUE}}px\"\n};\nconst transform = {\n  fill: value => \"color: \".concat(Color.shared.setValue(value).toHex()),\n  breakWords: value => \"word-wrap: \".concat(value ? \"break-all\" : \"break-word\"),\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(\"\".concat(i, \" { \").concat(cssTagStyle.join(\";\"), \" }\"));\n  }\n}\nexport { textStyleToCSS };","map":{"version":3,"names":["textStyleToCSS","style","stroke","_stroke","fill","_fill","cssStyleString","concat","Color","shared","setValue","color","toHex","fontSize","fontFamily","fontWeight","fontStyle","fontVariant","letterSpacing","align","padding","whiteSpace","wordWrap","lineHeight","breakWords","wordWrapWidth","strokeToCSS","dropShadow","dropShadowToCSS","cssOverrides","join","cssStyles","tagStyleToCSS","tagStyles","dropShadowStyle","setAlpha","alpha","toHexa","x","Math","round","cos","angle","distance","y","sin","position","blur","width","templates","transform","value","out","i","tagStyle","cssTagStyle","j","push","replace"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts"],"sourcesContent":["import { Color } from '../../../color/Color';\n\nimport type { StrokeStyle } from '../../graphics/shared/GraphicsContext';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HtmlTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: StrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}