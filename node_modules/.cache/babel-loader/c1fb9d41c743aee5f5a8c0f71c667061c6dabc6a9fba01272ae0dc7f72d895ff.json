{"ast":null,"code":"import { Resolver } from '../../assets/resolver/Resolver.mjs';\n\"use strict\";\nfunction getResolutionOfUrl(url) {\n  var _Resolver$RETINA_PREF;\n  let defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const resolution = (_Resolver$RETINA_PREF = Resolver.RETINA_PREFIX) === null || _Resolver$RETINA_PREF === void 0 ? void 0 : _Resolver$RETINA_PREF.exec(url);\n  if (resolution) {\n    return parseFloat(resolution[1]);\n  }\n  return defaultValue;\n}\nexport { getResolutionOfUrl };","map":{"version":3,"names":["getResolutionOfUrl","url","_Resolver$RETINA_PREF","defaultValue","arguments","length","undefined","resolution","Resolver","RETINA_PREFIX","exec","parseFloat"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/utils/network/getResolutionOfUrl.ts"],"sourcesContent":["import { Resolver } from '../../assets/resolver/Resolver';\n\n/**\n * get the resolution / device pixel ratio of an asset by looking for the prefix\n * used by spritesheets and image urls\n * @memberof utils\n * @function getResolutionOfUrl\n * @param {string} url - the image path\n * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\n * @returns {number} resolution / device pixel ratio of an asset\n */\nexport function getResolutionOfUrl(url: string, defaultValue = 1): number\n{\n    const resolution = Resolver.RETINA_PREFIX?.exec(url);\n\n    if (resolution)\n    {\n        return parseFloat(resolution[1]);\n    }\n\n    return defaultValue;\n}\n"],"mappings":";;AAWgB,SAAAA,mBAAmBC,GAAa,EAChD;EAAA,IAAAC,qBAAA;EAAA,IADgDC,YAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAe,CAC/D;EACI,MAAMG,UAAa,IAAAL,qBAAA,GAAAM,QAAA,CAASC,aAAe,cAAAP,qBAAA,uBAAxBA,qBAAA,CAAwBQ,IAAA,CAAKT,GAAG;EAEnD,IAAIM,UACJ;IACW,OAAAI,UAAA,CAAWJ,UAAW,EAAC,CAAC;EAAA;EAG5B,OAAAJ,YAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}