{"ast":null,"code":"import { Container, UPDATE_COLOR, UPDATE_BLEND, UPDATE_VISIBLE } from '../Container.mjs';\nimport { mixColors } from './mixColors.mjs';\n\"use strict\";\nconst tempContainer = new Container();\nfunction updateRenderGroupTransforms(renderGroup) {\n  let updateChildRenderGroups = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick;\n  renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      updateTransformAndChildren(list[i], updateTick, 0);\n    }\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(root.relativeGroupTransform, renderGroupParent.worldTransform);\n    renderGroup.worldColor = mixColors(root.groupColor, renderGroupParent.worldColor);\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick) return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.isRenderGroupRoot) {\n    updateFlags = updateFlags | container._updateFlags;\n    container.relativeGroupTransform.appendFrom(localTransform, parent.relativeGroupTransform);\n    if (updateFlags) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.isRenderGroupRoot) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.renderGroup;\n    if (container.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(container);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = mixColors(container.localColor, parent.groupColor);\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };","map":{"version":3,"names":["tempContainer","Container","updateRenderGroupTransforms","renderGroup","updateChildRenderGroups","arguments","length","undefined","updateRenderGroupTransform","childrenToUpdate","updateTick","j","childrenAtDepth","list","index","i","updateTransformAndChildren","renderGroupChildren","root","worldAlpha","renderGroupParent","worldTransform","appendFrom","relativeGroupTransform","worldColor","mixColors","groupColor","groupAlpha","copyFrom","localTransform","localColor","localAlpha","worldColorAlpha","container","updateFlags","didChange","updateLocalTransform","parent","isRenderGroupRoot","_updateFlags","updateColorBlendVisibility","children","renderPipeId","structureDidChange","updateRenderable","UPDATE_COLOR","groupColorAlpha","UPDATE_BLEND","groupBlendMode","localBlendMode","UPDATE_VISIBLE","globalDisplayStatus","localDisplayStatus"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/scene/container/utils/updateRenderGroupTransforms.ts"],"sourcesContent":["import { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_VISIBLE } from '../Container';\nimport { mixColors } from './mixColors';\n\nimport type { RenderGroup } from '../RenderGroup';\n\nconst tempContainer = new Container();\n\nexport function updateRenderGroupTransforms(renderGroup: RenderGroup, updateChildRenderGroups = false)\n{\n    updateRenderGroupTransform(renderGroup);\n\n    const childrenToUpdate = renderGroup.childrenToUpdate;\n\n    const updateTick = renderGroup.updateTick;\n\n    renderGroup.updateTick++;\n\n    for (const j in childrenToUpdate)\n    {\n        const childrenAtDepth = childrenToUpdate[j];\n\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n\n        for (let i = 0; i < index; i++)\n        {\n            updateTransformAndChildren(list[i], updateTick, 0);\n        }\n\n        childrenAtDepth.index = 0;\n    }\n\n    if (updateChildRenderGroups)\n    {\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n        }\n    }\n}\n\nexport function updateRenderGroupTransform(renderGroup: RenderGroup)\n{\n    const root = renderGroup.root;\n\n    let worldAlpha;\n\n    if (renderGroup.renderGroupParent)\n    {\n        const renderGroupParent = renderGroup.renderGroupParent;\n\n        renderGroup.worldTransform.appendFrom(\n            root.relativeGroupTransform,\n            renderGroupParent.worldTransform,\n        );\n\n        renderGroup.worldColor = mixColors(\n            root.groupColor,\n            renderGroupParent.worldColor,\n        );\n\n        worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n    }\n    else\n    {\n        renderGroup.worldTransform.copyFrom(root.localTransform);\n        renderGroup.worldColor = root.localColor;\n        worldAlpha = root.localAlpha;\n    }\n\n    // eslint-disable-next-line no-nested-ternary\n    worldAlpha = worldAlpha < 0 ? 0 : (worldAlpha > 1 ? 1 : worldAlpha);\n    renderGroup.worldAlpha = worldAlpha;\n\n    renderGroup.worldColorAlpha = renderGroup.worldColor\n            + (((worldAlpha * 255) | 0) << 24);\n}\n\nexport function updateTransformAndChildren(container: Container, updateTick: number, updateFlags: number)\n{\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n\n    container.didChange = false;\n\n    const localTransform = container.localTransform;\n\n    container.updateLocalTransform();\n\n    const parent = container.parent;\n\n    if ((parent && !parent.isRenderGroupRoot))\n    {\n        updateFlags = updateFlags | container._updateFlags;\n\n        container.relativeGroupTransform.appendFrom(\n            localTransform,\n            parent.relativeGroupTransform,\n        );\n\n        if (updateFlags)\n        {\n            updateColorBlendVisibility(container, parent, updateFlags);\n        }\n    }\n    else\n    {\n        updateFlags = container._updateFlags;\n\n        container.relativeGroupTransform.copyFrom(localTransform);\n\n        if (updateFlags)\n        {\n            updateColorBlendVisibility(container, tempContainer, updateFlags);\n        }\n    }\n\n    // don't update children if its a layer..\n    if (!container.isRenderGroupRoot)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            updateTransformAndChildren(children[i], updateTick, updateFlags);\n        }\n\n        const renderGroup = container.renderGroup;\n\n        if (container.renderPipeId && !renderGroup.structureDidChange)\n        {\n            renderGroup.updateRenderable(container);\n        }\n    }\n}\n\nfunction updateColorBlendVisibility(\n    container: Container,\n    parent: Container,\n    updateFlags: number,\n): void\n{\n    if (updateFlags & UPDATE_COLOR)\n    {\n        container.groupColor = mixColors(\n            container.localColor,\n            parent.groupColor\n        );\n\n        let groupAlpha = container.localAlpha * parent.groupAlpha;\n\n        // eslint-disable-next-line no-nested-ternary\n        groupAlpha = groupAlpha < 0 ? 0 : (groupAlpha > 1 ? 1 : groupAlpha);\n\n        container.groupAlpha = groupAlpha;\n        container.groupColorAlpha = container.groupColor + (((groupAlpha * 255) | 0) << 24);\n    }\n\n    if (updateFlags & UPDATE_BLEND)\n    {\n        container.groupBlendMode = container.localBlendMode === 'inherit' ? parent.groupBlendMode : container.localBlendMode;\n    }\n\n    if (updateFlags & UPDATE_VISIBLE)\n    {\n        container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n    }\n\n    container._updateFlags = 0;\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}