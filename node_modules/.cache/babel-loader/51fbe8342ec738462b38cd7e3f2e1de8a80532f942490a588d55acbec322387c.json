{"ast":null,"code":"import { LoaderParserPriority } from '../assets/loader/parsers/LoaderParser.mjs';\nimport { Resolver } from '../assets/resolver/Resolver.mjs';\nimport { copySearchParams } from '../assets/utils/copySearchParams.mjs';\nimport { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { path } from '../utils/path.mjs';\nimport { Spritesheet } from './Spritesheet.mjs';\n\"use strict\";\nconst validImages = [\"jpg\", \"png\", \"jpeg\", \"avif\", \"webp\", \"basis\", \"etc2\", \"bc7\", \"bc6h\", \"bc5\", \"bc4\", \"bc3\", \"bc2\", \"bc1\", \"eac\", \"astc\"];\nfunction getCacheableAssets(keys, asset, ignoreMultiPack) {\n  const out = {};\n  keys.forEach(key => {\n    out[key] = asset;\n  });\n  Object.keys(asset.textures).forEach(key => {\n    out[key] = asset.textures[key];\n  });\n  if (!ignoreMultiPack) {\n    const basePath = path.dirname(keys[0]);\n    asset.linkedSheets.forEach((item, i) => {\n      const out2 = getCacheableAssets([\"\".concat(basePath, \"/\").concat(asset.data.meta.related_multi_packs[i])], item, true);\n      Object.assign(out, out2);\n    });\n  }\n  return out;\n}\nconst spritesheetAsset = {\n  extension: ExtensionType.Asset,\n  /** Handle the caching of the related Spritesheet Textures */\n  cache: {\n    test: asset => asset instanceof Spritesheet,\n    getCacheableAssets: (keys, asset) => getCacheableAssets(keys, asset, false)\n  },\n  /** Resolve the resolution of the asset. */\n  resolver: {\n    test: value => {\n      const tempURL = value.split(\"?\")[0];\n      const split = tempURL.split(\".\");\n      const extension = split.pop();\n      const format = split.pop();\n      return extension === \"json\" && validImages.includes(format);\n    },\n    parse: value => {\n      var _Resolver$RETINA_PREF, _Resolver$RETINA_PREF2;\n      const split = value.split(\".\");\n      return {\n        resolution: parseFloat((_Resolver$RETINA_PREF = (_Resolver$RETINA_PREF2 = Resolver.RETINA_PREFIX.exec(value)) === null || _Resolver$RETINA_PREF2 === void 0 ? void 0 : _Resolver$RETINA_PREF2[1]) !== null && _Resolver$RETINA_PREF !== void 0 ? _Resolver$RETINA_PREF : \"1\"),\n        format: split[split.length - 2],\n        src: value\n      };\n    }\n  },\n  /**\n   * Loader plugin that parses sprite sheets!\n   * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n   * If it is, we load the spritesheets image and parse the data into Spritesheet\n   * All textures in the sprite sheet are then added to the cache\n   */\n  loader: {\n    name: \"spritesheetLoader\",\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.Normal\n    },\n    async testParse(asset, options) {\n      return path.extname(options.src).toLowerCase() === \".json\" && !!asset.frames;\n    },\n    async parse(asset, options, loader) {\n      var _options$data, _asset$meta;\n      const {\n        texture: imageTexture,\n        // if user need to use preloaded texture\n        imageFilename\n        // if user need to use custom filename (not from jsonFile.meta.image)\n      } = (_options$data = options === null || options === void 0 ? void 0 : options.data) !== null && _options$data !== void 0 ? _options$data : {};\n      let basePath = path.dirname(options.src);\n      if (basePath && basePath.lastIndexOf(\"/\") !== basePath.length - 1) {\n        basePath += \"/\";\n      }\n      let texture;\n      if (imageTexture instanceof Texture) {\n        texture = imageTexture;\n      } else {\n        const imagePath = copySearchParams(basePath + (imageFilename !== null && imageFilename !== void 0 ? imageFilename : asset.meta.image), options.src);\n        const assets = await loader.load([imagePath]);\n        texture = assets[imagePath];\n      }\n      const spritesheet = new Spritesheet(texture.source, asset);\n      await spritesheet.parse();\n      const multiPacks = asset === null || asset === void 0 ? void 0 : (_asset$meta = asset.meta) === null || _asset$meta === void 0 ? void 0 : _asset$meta.related_multi_packs;\n      if (Array.isArray(multiPacks)) {\n        const promises = [];\n        for (const item of multiPacks) {\n          var _options$data2;\n          if (typeof item !== \"string\") {\n            continue;\n          }\n          let itemUrl = basePath + item;\n          if ((_options$data2 = options.data) !== null && _options$data2 !== void 0 && _options$data2.ignoreMultiPack) {\n            continue;\n          }\n          itemUrl = copySearchParams(itemUrl, options.src);\n          promises.push(loader.load({\n            src: itemUrl,\n            data: {\n              ignoreMultiPack: true\n            }\n          }));\n        }\n        const res = await Promise.all(promises);\n        spritesheet.linkedSheets = res;\n        res.forEach(item => {\n          item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter(sp => sp !== item));\n        });\n      }\n      return spritesheet;\n    },\n    async unload(spritesheet, _resolvedAsset, loader) {\n      await loader.unload(spritesheet.textureSource._sourceOrigin);\n      spritesheet.destroy(false);\n    }\n  }\n};\nexport { spritesheetAsset };","map":{"version":3,"names":["validImages","getCacheableAssets","keys","asset","ignoreMultiPack","out","forEach","key","Object","textures","basePath","path","dirname","linkedSheets","item","i","out2","concat","data","meta","related_multi_packs","assign","spritesheetAsset","extension","ExtensionType","Asset","cache","test","Spritesheet","resolver","value","tempURL","split","pop","format","includes","parse","_Resolver$RETINA_PREF","_Resolver$RETINA_PREF2","resolution","parseFloat","Resolver","RETINA_PREFIX","exec","length","src","loader","name","type","LoadParser","priority","LoaderParserPriority","Normal","testParse","options","extname","toLowerCase","frames","_options$data","_asset$meta","texture","imageTexture","imageFilename","lastIndexOf","Texture","imagePath","copySearchParams","image","assets","load","spritesheet","source","multiPacks","Array","isArray","promises","_options$data2","itemUrl","push","res","Promise","all","filter","sp","unload","_resolvedAsset","textureSource","_sourceOrigin","destroy"],"sources":["/home/user/Desktop/Projects/RoyalGames/royalgames-client/node_modules/pixi.js/src/spritesheet/spritesheetAsset.ts"],"sourcesContent":["import { LoaderParserPriority } from '../assets/loader/parsers/LoaderParser';\nimport { Resolver } from '../assets/resolver/Resolver';\nimport { copySearchParams } from '../assets/utils/copySearchParams';\nimport { ExtensionType } from '../extensions/Extensions';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { path } from '../utils/path';\nimport { Spritesheet } from './Spritesheet';\n\nimport type { AssetExtension } from '../assets/AssetExtension';\nimport type { Loader } from '../assets/loader/Loader';\nimport type { ResolvedAsset, UnresolvedAsset } from '../assets/types';\nimport type { SpritesheetData } from './Spritesheet';\n\nexport interface SpriteSheetJson extends SpritesheetData\n{\n    meta: {\n        image: string;\n        scale: string;\n        // eslint-disable-next-line camelcase\n        related_multi_packs?: string[];\n    };\n}\n\nconst validImages = ['jpg', 'png', 'jpeg', 'avif', 'webp',\n    'basis', 'etc2', 'bc7', 'bc6h', 'bc5', 'bc4', 'bc3', 'bc2', 'bc1', 'eac', 'astc'];\n\nfunction getCacheableAssets(keys: string[], asset: Spritesheet, ignoreMultiPack: boolean)\n{\n    const out: Record<string, any> = {};\n\n    keys.forEach((key: string) =>\n    {\n        out[key] = asset;\n    });\n\n    Object.keys(asset.textures).forEach((key) =>\n    {\n        out[key] = asset.textures[key];\n    });\n\n    if (!ignoreMultiPack)\n    {\n        const basePath = path.dirname(keys[0]);\n\n        asset.linkedSheets.forEach((item: Spritesheet, i) =>\n        {\n            const out2 = getCacheableAssets([`${basePath}/${asset.data.meta.related_multi_packs[i]}`], item, true);\n\n            Object.assign(out, out2);\n        });\n    }\n\n    return out;\n}\n\n/**\n * Asset extension for loading spritesheets\n * @example\n * import { Assets } from 'pixi.js';\n *\n * Assets.load({\n *     alias: 'spritesheet',\n *     src: 'path/to/spritesheet.json',\n *     data: {\n *         ignoreMultiPack: true,\n *     }\n * })\n * @type {AssetExtension}\n * @memberof assets\n */\nexport const spritesheetAsset = {\n    extension: ExtensionType.Asset,\n    /** Handle the caching of the related Spritesheet Textures */\n    cache: {\n        test: (asset: Spritesheet) => asset instanceof Spritesheet,\n        getCacheableAssets: (keys: string[], asset: Spritesheet) => getCacheableAssets(keys, asset, false),\n    },\n    /** Resolve the resolution of the asset. */\n    resolver: {\n        test: (value: string): boolean =>\n        {\n            const tempURL = value.split('?')[0];\n            const split = tempURL.split('.');\n            const extension = split.pop();\n            const format = split.pop();\n\n            return extension === 'json' && validImages.includes(format);\n        },\n        parse: (value: string): UnresolvedAsset =>\n        {\n            const split = value.split('.');\n\n            return {\n                resolution: parseFloat(Resolver.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                format: split[split.length - 2],\n                src: value,\n            };\n        },\n    },\n    /**\n     * Loader plugin that parses sprite sheets!\n     * once the JSON has been loaded this checks to see if the JSON is spritesheet data.\n     * If it is, we load the spritesheets image and parse the data into Spritesheet\n     * All textures in the sprite sheet are then added to the cache\n     */\n    loader: {\n        name: 'spritesheetLoader',\n\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n        },\n\n        async testParse(asset: SpriteSheetJson, options: ResolvedAsset): Promise<boolean>\n        {\n            return (path.extname(options.src).toLowerCase() === '.json' && !!asset.frames);\n        },\n\n        async parse(\n            asset: SpriteSheetJson,\n            options: ResolvedAsset<{texture: Texture, imageFilename: string, ignoreMultiPack: boolean}>,\n            loader: Loader\n        ): Promise<Spritesheet>\n        {\n            const {\n                texture: imageTexture, // if user need to use preloaded texture\n                imageFilename // if user need to use custom filename (not from jsonFile.meta.image)\n            } = options?.data ?? {};\n\n            let basePath = path.dirname(options.src);\n\n            if (basePath && basePath.lastIndexOf('/') !== (basePath.length - 1))\n            {\n                basePath += '/';\n            }\n\n            let texture: Texture;\n\n            if (imageTexture instanceof Texture)\n            {\n                texture = imageTexture;\n            }\n            else\n            {\n                const imagePath = copySearchParams(basePath + (imageFilename ?? asset.meta.image), options.src);\n\n                const assets = await loader.load<Texture>([imagePath]);\n\n                texture = assets[imagePath];\n            }\n\n            const spritesheet = new Spritesheet(\n                texture.source,\n                asset,\n            );\n\n            await spritesheet.parse();\n\n            // Check and add the multi atlas\n            // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n            // eslint-disable-next-line camelcase\n            const multiPacks = asset?.meta?.related_multi_packs;\n\n            if (Array.isArray(multiPacks))\n            {\n                const promises: Promise<Spritesheet<SpriteSheetJson>>[] = [];\n\n                for (const item of multiPacks)\n                {\n                    if (typeof item !== 'string')\n                    {\n                        continue;\n                    }\n\n                    let itemUrl = basePath + item;\n\n                    // Check if the file wasn't already added as multipack\n                    if (options.data?.ignoreMultiPack)\n                    {\n                        continue;\n                    }\n\n                    itemUrl = copySearchParams(itemUrl, options.src);\n\n                    promises.push(loader.load<Spritesheet<SpriteSheetJson>>({\n                        src: itemUrl,\n                        data: {\n                            ignoreMultiPack: true,\n                        }\n                    }));\n                }\n\n                const res = await Promise.all(promises);\n\n                spritesheet.linkedSheets = res;\n                res.forEach((item) =>\n                {\n                    item.linkedSheets = [spritesheet].concat(spritesheet.linkedSheets.filter((sp) => (sp !== item)));\n                });\n            }\n\n            return spritesheet;\n        },\n\n        async unload(spritesheet: Spritesheet, _resolvedAsset, loader)\n        {\n            await loader.unload(spritesheet.textureSource._sourceOrigin);\n\n            spritesheet.destroy(false);\n        },\n    },\n} as AssetExtension<Spritesheet | SpriteSheetJson>;\n"],"mappings":";;;;;;;;AAuBA,MAAMA,WAAc,IAAC,OAAO,OAAO,QAAQ,QAAQ,QAC/C,SAAS,QAAQ,OAAO,QAAQ,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAM;AAEpF,SAASC,mBAAmBC,IAAgB,EAAAC,KAAA,EAAoBC,eAChE;EACI,MAAMC,GAAA,GAA2B,EAAC;EAE7BH,IAAA,CAAAI,OAAA,CAASC,GACd;IACIF,GAAA,CAAIE,GAAG,CAAI,GAAAJ,KAAA;EAAA,CACd;EAEDK,MAAA,CAAON,IAAA,CAAKC,KAAM,CAAAM,QAAQ,CAAE,CAAAH,OAAA,CAASC,GACrC;IACIF,GAAA,CAAIE,GAAG,IAAIJ,KAAM,CAAAM,QAAA,CAASF,GAAG;EAAA,CAChC;EAED,IAAI,CAACH,eACL;IACI,MAAMM,QAAW,GAAAC,IAAA,CAAKC,OAAQ,CAAAV,IAAA,CAAK,CAAC,CAAC;IAErCC,KAAA,CAAMU,YAAa,CAAAP,OAAA,CAAQ,CAACQ,IAAA,EAAmBC,CAC/C;MACI,MAAMC,IAAO,GAAAf,kBAAA,CAAmB,IAAAgB,MAAA,CAAIP,QAAQ,OAAAO,MAAA,CAAId,KAAA,CAAMe,IAAK,CAAAC,IAAA,CAAKC,mBAAA,CAAoBL,CAAC,CAAC,EAAE,EAAGD,IAAA,EAAM,IAAI;MAE9FN,MAAA,CAAAa,MAAA,CAAOhB,GAAA,EAAKW,IAAI;IAAA,CAC1B;EAAA;EAGE,OAAAX,GAAA;AACX;AAiBO,MAAMiB,gBAAmB;EAC5BC,SAAA,EAAWC,aAAc,CAAAC,KAAA;EAAA;EAEzBC,KAAO;IACHC,IAAA,EAAOxB,KAAA,IAAuBA,KAAiB,YAAAyB,WAAA;IAC/C3B,kBAAA,EAAoBA,CAACC,IAAA,EAAgBC,KAAA,KAAuBF,kBAAmB,CAAAC,IAAA,EAAMC,KAAA,EAAO,KAAK;EAAA,CACrG;EAAA;EAEA0B,QAAU;IACNF,IAAA,EAAOG,KACP;MACI,MAAMC,OAAU,GAAAD,KAAA,CAAME,KAAM,IAAG,EAAE,CAAC;MAC5B,MAAAA,KAAA,GAAQD,OAAQ,CAAAC,KAAA,CAAM,GAAG;MACzB,MAAAT,SAAA,GAAYS,KAAA,CAAMC,GAAI;MACtB,MAAAC,MAAA,GAASF,KAAA,CAAMC,GAAI;MAEzB,OAAOV,SAAc,eAAUvB,WAAY,CAAAmC,QAAA,CAASD,MAAM;IAAA,CAC9D;IACAE,KAAA,EAAQN,KACR;MAAA,IAAAO,qBAAA,EAAAC,sBAAA;MACU,MAAAN,KAAA,GAAQF,KAAM,CAAAE,KAAA,CAAM,GAAG;MAEtB;QACHO,UAAA,EAAYC,UAAA,EAAAH,qBAAA,IAAAC,sBAAA,GAAWG,QAAS,CAAAC,aAAA,CAAcC,IAAA,CAAKb,KAAK,eAAAQ,sBAAA,uBAAjCA,sBAAA,CAAqC,CAAC,eAAAD,qBAAA,cAAAA,qBAAA,GAAK,GAAG;QACrEH,MAAQ,EAAAF,KAAA,CAAMA,KAAM,CAAAY,MAAA,GAAS,CAAC;QAC9BC,GAAK,EAAAf;MAAA,CACT;IAAA;EACJ,CACJ;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAOAgB,MAAQ;IACJC,IAAM;IAENxB,SAAW;MACPyB,IAAA,EAAMxB,aAAc,CAAAyB,UAAA;MACpBC,QAAA,EAAUC,oBAAqB,CAAAC;IAAA,CACnC;IAEA,MAAMC,SAAUA,CAAAlD,KAAA,EAAwBmD,OACxC;MACY,OAAA3C,IAAA,CAAK4C,OAAQ,CAAAD,OAAA,CAAQT,GAAG,EAAEW,WAAA,EAAkB,gBAAW,CAAC,CAACrD,KAAM,CAAAsD,MAAA;IAAA,CAC3E;IAEA,MAAMrB,MACFjC,KACA,EAAAmD,OAAA,EACAR,MAEJ;MAAA,IAAAY,aAAA,EAAAC,WAAA;MACU;QACFC,OAAS,EAAAC,YAAA;QAAA;QACTC;QAAA;MAAA,CACJ,IAAAJ,aAAA,GAAIJ,OAAS,aAATA,OAAS,uBAATA,OAAS,CAAApC,IAAA,cAAAwC,aAAA,cAAAA,aAAA,GAAQ,EAAC;MAEtB,IAAIhD,QAAW,GAAAC,IAAA,CAAKC,OAAQ,CAAA0C,OAAA,CAAQT,GAAG;MAEvC,IAAInC,QAAA,IAAYA,QAAS,CAAAqD,WAAA,CAAY,GAAG,CAAO,KAAArD,QAAA,CAASkC,MAAA,GAAS,CACjE;QACgBlC,QAAA;MAAA;MAGZ,IAAAkD,OAAA;MAEJ,IAAIC,YAAA,YAAwBG,OAC5B;QACcJ,OAAA,GAAAC,YAAA;MAAA,CAGd;QACU,MAAAI,SAAA,GAAYC,gBAAA,CAAiBxD,QAAY,IAAAoD,aAAA,aAAAA,aAAA,cAAAA,aAAA,GAAiB3D,KAAA,CAAMgB,IAAK,CAAAgD,KAAA,GAAQb,OAAA,CAAQT,GAAG;QAE9F,MAAMuB,MAAA,GAAS,MAAMtB,MAAA,CAAOuB,IAAc,EAACJ,SAAS,CAAC;QAErDL,OAAA,GAAUQ,MAAA,CAAOH,SAAS;MAAA;MAG9B,MAAMK,WAAA,GAAc,IAAI1C,WAAA,CACpBgC,OAAQ,CAAAW,MAAA,EACRpE,KAAA,CACJ;MAEA,MAAMmE,WAAA,CAAYlC,KAAM;MAKlB,MAAAoC,UAAA,GAAarE,KAAA,aAAAA,KAAA,wBAAAwD,WAAA,GAAAxD,KAAA,CAAOgB,IAAM,cAAAwC,WAAA,uBAAbA,WAAA,CAAavC,mBAAA;MAE5B,IAAAqD,KAAA,CAAMC,OAAQ,CAAAF,UAAU,CAC5B;QACI,MAAMG,QAAA,GAAoD,EAAC;QAE3D,WAAW7D,IAAA,IAAQ0D,UACnB;UAAA,IAAAI,cAAA;UACQ,WAAO9D,IAAA,KAAS,QACpB;YACI;UAAA;UAGJ,IAAI+D,OAAA,GAAUnE,QAAW,GAAAI,IAAA;UAGrB,KAAA8D,cAAA,GAAAtB,OAAA,CAAQpC,IAAA,cAAA0D,cAAA,eAARA,cAAA,CAAcxE,eAClB;YACI;UAAA;UAGMyE,OAAA,GAAAX,gBAAA,CAAiBW,OAAS,EAAAvB,OAAA,CAAQT,GAAG;UAEtC8B,QAAA,CAAAG,IAAA,CAAKhC,MAAA,CAAOuB,IAAmC;YACpDxB,GAAK,EAAAgC,OAAA;YACL3D,IAAM;cACFd,eAAiB;YAAA;UACrB,CACH,CAAC;QAAA;QAGN,MAAM2E,GAAM,SAAMC,OAAQ,CAAAC,GAAA,CAAIN,QAAQ;QAEtCL,WAAA,CAAYzD,YAAe,GAAAkE,GAAA;QACvBA,GAAA,CAAAzE,OAAA,CAASQ,IACb;UACIA,IAAA,CAAKD,YAAe,IAACyD,WAAW,EAAErD,MAAO,CAAAqD,WAAA,CAAYzD,YAAa,CAAAqE,MAAA,CAAQC,EAAA,IAAQA,EAAO,KAAArE,IAAK,CAAC;QAAA,CAClG;MAAA;MAGE,OAAAwD,WAAA;IAAA,CACX;IAEA,MAAMc,OAAOd,WAA0B,EAAAe,cAAA,EAAgBvC,MACvD;MACI,MAAMA,MAAO,CAAAsC,MAAA,CAAOd,WAAY,CAAAgB,aAAA,CAAcC,aAAa;MAE3DjB,WAAA,CAAYkB,OAAA,CAAQ,KAAK;IAAA;EAC7B;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}